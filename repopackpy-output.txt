================================================================
RepopackPy Output File
================================================================

This file was generated by RepopackPy on: 2025-02-19T05:05:12.925674

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py

================================================================
Repository Structure
================================================================
README.md
eslint.config.js
index.html
package.json
postcss.config.js
src\App.css
src\App.tsx
src\assets\design_2.png
src\assets\designer_1.png
src\components\common\ErrorBoundary.tsx
src\components\common\LanguageSwitch.tsx
src\components\layouts\AppLayout.tsx
src\components\layouts\Container.tsx
src\components\layouts\Grid.tsx
src\components\layouts\PageLayout.tsx
src\components\layouts\Stack.tsx
src\components\ui\alert.tsx
src\components\ui\badge.tsx
src\components\ui\button.tsx
src\components\ui\card.tsx
src\components\ui\checkbox.tsx
src\components\ui\counter.tsx
src\components\ui\dialog.tsx
src\components\ui\form.tsx
src\components\ui\input.tsx
src\components\ui\label.tsx
src\components\ui\loading-spinner.tsx
src\components\ui\radio-group.tsx
src\components\ui\select.tsx
src\components\ui\switch.tsx
src\components\ui\table.tsx
src\components\ui\tabs.tsx
src\components\ui\textarea.tsx
src\components\ui\toast.tsx
src\config\i18n\translations\ar.ts
src\config\i18n\translations\en.ts
src\config\responsive.ts
src\features\admin\components\ContactsTable.tsx
src\features\admin\components\LoginForm.tsx
src\features\chat\components\ChatInterface.tsx
src\features\chat\components\LoadingIndicator.tsx
src\features\chat\components\MessageBubble.tsx
src\features\chat\components\ResourceCard.tsx
src\features\chat\components\WelcomeSection.tsx
src\features\landing\components\ContactSection.tsx
src\features\landing\components\FaqSection.tsx
src\features\landing\components\FeatureCard.tsx
src\features\landing\components\FooterSection.tsx
src\features\landing\components\HeroSection.tsx
src\features\landing\components\SearchSection.tsx
src\features\landing\components\StatsSection.tsx
src\features\library\components\BreadcrumbNav.tsx
src\features\library\components\FileList.tsx
src\features\library\components\SearchToolbar.tsx
src\features\search\components\SearchBar.tsx
src\features\search\components\SearchFilters.tsx
src\features\search\components\SearchResults.tsx
src\features\templates\components\DownloadActions.tsx
src\features\templates\components\EmailDialog.tsx
src\features\templates\components\TemplateCard.tsx
src\features\templates\components\TemplateForm.tsx
src\hooks\api\useAdmin.ts
src\hooks\api\useChat.ts
src\hooks\api\useCorrection.ts
src\hooks\api\useLibrary.ts
src\hooks\api\useSearch.ts
src\hooks\api\useTemplates.ts
src\hooks\useBreakpoint.ts
src\hooks\useLanguage.ts
src\hooks\useToast.ts
src\index.css
src\lib\Client.ts
src\lib\axios.ts
src\lib\calculator.ts
src\lib\tafqit.ts
src\lib\utils.ts
src\main.tsx
src\pages\AdminPage.tsx
src\pages\CalculatorPage.tsx
src\pages\ChatPage.tsx
src\pages\CorrectionPage.tsx
src\pages\LandingPage.tsx
src\pages\LibraryPage.tsx
src\pages\SearchPage.tsx
src\pages\TemplatesPage.tsx
src\providers\LanguageProvider.tsx
src\providers\ThemeProvider.tsx
src\providers\ToastProvider.tsx
src\services\api\endpoints.ts
src\services\api\requests.ts
src\services\api\types.ts
src\stores\uiStore.ts
src\styles\base.css
src\styles\responsive.css
src\styles\theme\index.ts
src\styles\theme\tailwind.config.ts
src\types\admin.ts
src\types\api.ts
src\types\calculator.ts
src\types\chat.ts
src\types\correction.ts
src\types\index.ts
src\types\language.ts
src\types\resource.ts
src\types\search.ts
src\vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "frontend_v2",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.0",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@tanstack/react-query": "^5.66.0",
    "@tanstack/react-query-devtools": "^5.66.0",
    "axios": "^1.7.9",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.4.2",
    "lucide-react": "^0.475.0",
    "luxon": "^3.5.0",
    "moment-hijri": "^3.0.0",
    "number-to-words": "^1.2.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.1.5",
    "react-toastify": "^11.0.3",
    "tafqit": "^0.0.1",
    "tailwind-merge": "^3.0.1",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.19.0",
    "@types/luxon": "^3.4.2",
    "@types/node": "^22.13.1",
    "@types/number-to-words": "^1.2.3",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.19.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.18",
    "globals": "^15.14.0",
    "postcss": "^8.5.2",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.22.0",
    "vite": "^6.1.0"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: { config: './src/styles/theme/tailwind.config.ts'},
    autoprefixer: {},
  },
}

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    // ... other options ...
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path';

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  css: {
    postcss: './postcss.config.js',
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path.replace(/^\/api/, '')
      }
    }
  }
})

================
File: src\App.css
================
#root {
  width: 100%;
  min-height: 100vh;

}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src\App.tsx
================
// src/App.tsx
import { QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { ThemeProvider } from './providers/ThemeProvider';
import { LanguageProvider } from './providers/LanguageProvider';
import { ToastProvider } from './providers/ToastProvider';
import { BrowserRouter, Route, Routes } from 'react-router-dom';
import { AppLayout } from './components/layouts/AppLayout';
import { queryClient } from './lib/Client';

import './styles/base.css';
import LandingPage from './pages/LandingPage';
import SearchPage from './pages/SearchPage';
import LibraryPage from './pages/LibraryPage';
import ChatPage from './pages/ChatPage';
import AdminPage from './pages/AdminPage';
import CorrectionPage from './pages/CorrectionPage';
import CalculatorPage from './pages/CalculatorPage';
import TemplatesPage from './pages/TemplatesPage';



function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider>
        <LanguageProvider>
          <BrowserRouter>
            <ToastProvider />
            <AppLayout>
              <Routes>
                <Route path="/" element={<LandingPage />} />
                <Route path="/search" element={<SearchPage />} />
                <Route path="/library" element={<LibraryPage />} />
                <Route path="/chat" element={<ChatPage />} />
                <Route path="/admin" element={<AdminPage />} />
                <Route path="/correction" element={<CorrectionPage />} />
                <Route path="/calculator" element={<CalculatorPage />} />
                <Route path="/templates" element={<TemplatesPage />} />
              </Routes>
            </AppLayout>
          </BrowserRouter>
        </LanguageProvider>
      </ThemeProvider>
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
}

export default App;

================
File: src\index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  width: 100%;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: src\main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src\vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: src\components\common\ErrorBoundary.tsx
================
// src/components/common/ErrorBoundary.tsx
import { Component, ReactNode } from 'react';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
}

export class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
  };

  public static getDerivedStateFromError(): State {
    return { hasError: true };
  }

  public render() {
    if (this.state.hasError) {
      return this.props.fallback || <div>Something went wrong</div>;
    }

    return this.props.children;
  }
}

================
File: src\components\common\LanguageSwitch.tsx
================
import { useLanguage } from '../../hooks/useLanguage';
import { Languages } from 'lucide-react';

export function LanguageSwitch() {
  const { language, setLanguage } = useLanguage();

  return (
    <button
      onClick={() => setLanguage(language === 'ar' ? 'en' : 'ar')}
      className="flex items-center gap-2 px-4 py-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
    >
      <Languages className="w-4 h-4" />
      <span>{language === 'ar' ? 'English' : 'العربية'}</span>
    </button>
  );
}

================
File: src\components\layouts\AppLayout.tsx
================
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Languages } from 'lucide-react';
import { useLanguage } from '@/hooks/useLanguage';
import path from 'path';

interface AppLayoutProps {
  children: React.ReactNode;
}

export function AppLayout({ children }: AppLayoutProps) {
  const { t, language, direction, setLanguage } = useLanguage();
  const location = useLocation();

  const navigationItems = [
    { path: '/', label: 'navigation.home' },
    { path: '/search', label: 'navigation.search' },
    { path: '/chat', label: 'navigation.chat' },
    { path: '/library', label: 'navigation.library' },
    { path: '/calculator', label: 'navigation.calculator' },
    { path: '/correction', label: 'navigation.correction' },
    { path: '/templates', label: 'navigation.templates'}
  ];

  const isActive = (path: string) => {
    return location.pathname === path;
  };

  return (
    <div className="min-h-screen bg-white" dir={direction}>
      {/* Header */}
      <header className="sticky top-0 z-50 bg-gradient-to-r from-indigo-50 to-indigo-100 border-b border-indigo-100">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex justify-between items-center">
            {/* Logo */}
            <Link 
              to="/"
              className="text-2xl font-black text-indigo-950 hover:text-indigo-800 transition-colors"
            >
              {t('procurement.communityName')}
            </Link>

            {/* Navigation */}
            <nav className="flex items-center gap-8">
              {navigationItems.map((item) => (
                <Link
                  key={item.path}
                  to={item.path}
                  className={`text-sm font-medium transition-colors ${
                    isActive(item.path)
                      ? 'text-indigo-950'
                      : 'text-indigo-700 hover:text-indigo-950'
                  }`}
                >
                  {t(item.label)}
                </Link>
              ))}
            </nav>

            {/* Language Switch */}
            <button
              onClick={() => setLanguage(language === 'ar' ? 'en' : 'ar')}
              className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-indigo-950 rounded-md bg-indigo-100 hover:bg-indigo-200 transition-colors"
            >
              <Languages className="w-4 h-4" />
              <span>{language === 'ar' ? 'English' : 'العربية'}</span>
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-1">
        {children}
      </main>

      {/* Footer */}
      <footer className="bg-indigo-50 py-16 mt-auto">
        <div className="max-w-7xl mx-auto px-6">
          {/* Upper Footer */}
          <div className="flex justify-between items-center mb-12">
            <div className="text-sm text-indigo-950">
              © {new Date().getFullYear()} {t('procurement.communityName')}
            </div>
            <div className="text-2xl font-black text-indigo-950">
              {t('procurement.systemName')}
            </div>
            <Link
              to="/chat"
              className="px-6 py-2 bg-indigo-950 text-white rounded-sm text-sm font-medium hover:bg-indigo-900 transition-colors"
            >
              {t('landing.hero.cta')}
            </Link>
          </div>

          {/* Divider */}
          <div className="h-px bg-indigo-200 mb-8" />

          {/* Lower Footer */}
          <div className="flex justify-between items-center">
            {/* Footer Navigation */}
            <nav className="flex gap-8 text-sm text-indigo-950">
              {navigationItems.map((item) => (
                <Link
                  key={item.path}
                  to={item.path}
                  className="hover:text-indigo-800 transition-colors"
                >
                  {t(item.label)}
                </Link>
              ))}
            </nav>

            {/* Social Links - You can customize these as needed */}
            <div className="flex gap-6">
              <a href="https://www.linkedin.com/in/yousefalmazyad" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-indigo-950 hover:text-indigo-800 transition-colors"
              >
                LinkedIn
              </a>
              {/* Add more social links as needed */}
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

================
File: src\components\layouts\Container.tsx
================
// src/components/layouts/Container.tsx
import { HTMLProps } from 'react';
import clsx from 'clsx';

interface ContainerProps extends HTMLProps<HTMLDivElement> {
  fluid?: boolean;
  className?: string;
}

export function Container({ 
  fluid = false, 
  className,
  children,
  ...props 
}: ContainerProps) {
  return (
    <div
      className={clsx(
        'mx-auto px-4 sm:px-6 lg:px-8',
        {
          'max-w-7xl': !fluid,
        },
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
}

================
File: src\components\layouts\Grid.tsx
================
// src/components/layouts/Grid.tsx
import { HTMLAttributes } from 'react';
import clsx from 'clsx';
import { Breakpoint } from '../../config/responsive';

type ResponsiveValue<T> = T | Partial<Record<Breakpoint, T>>;

interface GridProps extends Omit<HTMLAttributes<HTMLDivElement>, 'cols'> {
  cols?: ResponsiveValue<number>;
  gap?: ResponsiveValue<number>;
}

export function Grid({ 
  cols = 1,
  gap = 4,
  className,
  children,
  ...props 
}: GridProps) {
  const getResponsiveClasses = (
    prefix: string,
    value: ResponsiveValue<number>
  ): string => {
    if (typeof value === 'number') {
      return `${prefix}-${value}`;
    }

    return Object.entries(value)
      .map(([breakpoint, val]) => 
        breakpoint === 'xs' 
          ? `${prefix}-${val}` 
          : `${breakpoint}:${prefix}-${val}`
      )
      .join(' ');
  };

  const colsClasses = getResponsiveClasses('grid-cols', cols);
  const gapClasses = getResponsiveClasses('gap', gap);

  return (
    <div
      className={clsx(
        'grid',
        colsClasses,
        gapClasses,
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
}

================
File: src\components\layouts\PageLayout.tsx
================
// src/components/layouts/PageLayout.tsx
import { Stack } from './Stack';
import { Container } from './Container';

interface PageLayoutProps {
  title: string;
  description?: string;
  children: React.ReactNode;
  actions?: React.ReactNode;
}

export function PageLayout({
  title,
  description,
  children,
  actions,
}: PageLayoutProps) {
  return (
    <Stack spacing={6}>
      <Container>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-semibold text-gray-900">{title}</h1>
            {description && (
              <p className="mt-2 text-sm text-gray-500">{description}</p>
            )}
          </div>
          {actions && <div>{actions}</div>}
        </div>
      </Container>

      {children}
    </Stack>
  );
}

================
File: src\components\layouts\Stack.tsx
================
// src/components/layouts/Stack.tsx
import { HTMLAttributes } from 'react';
import clsx from 'clsx';
import { Breakpoint } from '../../config/responsive';

type ResponsiveValue<T> = T | Partial<Record<Breakpoint, T>>;
type Direction = 'row' | 'column';

interface StackProps extends HTMLAttributes<HTMLDivElement> {
  direction?: ResponsiveValue<Direction>;
  spacing?: ResponsiveValue<number>;
}

export function Stack({
  direction = 'column',
  spacing = 4,
  className,
  children,
  ...props
}: StackProps) {
  const getResponsiveClasses = (
    prefix: string,
    value: ResponsiveValue<string | number>
  ): string => {
    if (typeof value === 'string' || typeof value === 'number') {
      return `${prefix}-${value}`;
    }

    return Object.entries(value)
      .map(([breakpoint, val]) =>
        breakpoint === 'xs'
          ? `${prefix}-${val}`
          : `${breakpoint}:${prefix}-${val}`
      )
      .join(' ');
  };

  const directionClasses = getResponsiveClasses('flex', 
    typeof direction === 'string' ? direction :
    Object.entries(direction).reduce((acc, [breakpoint, value]) => ({
      ...acc,
      [breakpoint]: value
    }), {})
  );

  const getSpacingPrefix = (dir: Direction) => 
    dir === 'row' ? 'space-x' : 'space-y';

  const spacingClasses = typeof direction === 'string'
    ? getResponsiveClasses(getSpacingPrefix(direction), spacing)
    : Object.entries(direction).map(([breakpoint, dir]) =>
        breakpoint === 'xs'
          ? getResponsiveClasses(getSpacingPrefix(dir), spacing)
          : `${breakpoint}:${getResponsiveClasses(getSpacingPrefix(dir), spacing)}`
      ).join(' ');

  return (
    <div
      className={clsx(
        'flex',
        directionClasses,
        spacingClasses,
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
}

================
File: src\components\ui\alert.tsx
================
// src/components/ui/alert.tsx
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-red-500/50 text-red-600 dark:border-red-500 [&>svg]:text-red-600",
        success:
          "border-green-500/50 text-green-600 dark:border-green-500 [&>svg]:text-green-600",
        warning:
          "border-yellow-500/50 text-yellow-600 dark:border-yellow-500 [&>svg]:text-yellow-600",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

export const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

export const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

================
File: src\components\ui\badge.tsx
================
// src/components/ui/badge.tsx
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-gray-900 text-gray-50 shadow hover:bg-gray-900/80",
        secondary:
          "border-transparent bg-gray-100 text-gray-900 hover:bg-gray-100/80",
        destructive:
          "border-transparent bg-red-500 text-gray-50 shadow hover:bg-red-500/80",
        outline: "text-gray-950 shadow-sm",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };

================
File: src\components\ui\button.tsx
================
// src/components/ui/button.tsx
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary-600 text-white shadow hover:bg-primary-700",
        secondary: "bg-gray-100 text-gray-900 shadow-sm hover:bg-gray-200",
        outline: "border border-gray-200 bg-white shadow-sm hover:bg-gray-100",
        ghost: "hover:bg-gray-100 hover:text-gray-900",
        link: "text-primary-600 underline-offset-4 hover:underline",
        danger: "bg-red-600 text-white shadow hover:bg-red-700",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";
export { Button };

================
File: src\components\ui\card.tsx
================
// src/components/ui/card.tsx
import * as React from "react";
import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border border-gray-200 bg-white text-gray-950 shadow",
      className
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-gray-500", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};

================
File: src\components\ui\checkbox.tsx
================
// src/components/ui/checkbox.tsx
import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";
import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-gray-200 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-gray-900 data-[state=checked]:text-gray-50",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;
export {
    Checkbox
  };

================
File: src\components\ui\counter.tsx
================
// src/components/ui/counter.tsx
import { useEffect, useRef, useState } from 'react';

interface CountUpProps {
  end: number;
  start?: number;
  duration?: number;
  suffix?: string;
}

export function CountUp({ 
  end, 
  start = 0, 
  duration = 2000,
  suffix = '' 
}: CountUpProps) {
  const [count, setCount] = useState(start);
  const countRef = useRef(start);
  const timeoutRef = useRef<NodeJS.Timeout>(null);

  useEffect(() => {
    const steps = 60;
    const increment = (end - start) / steps;
    const timePerStep = duration / steps;

    const updateCount = () => {
      if (countRef.current < end) {
        const newCount = Math.min(countRef.current + increment, end);
        countRef.current = newCount;
        setCount(Math.floor(newCount));
        timeoutRef.current = setTimeout(updateCount, timePerStep);
      }
    };

    updateCount();

    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, [end, start, duration]);

  return <>{count}{suffix}</>;
}

================
File: src\components\ui\dialog.tsx
================
// src/components/ui/dialog.tsx
import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";
import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;
const DialogTrigger = DialogPrimitive.Trigger;
const DialogPortal = DialogPrimitive.Portal;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-gray-100 data-[state=open]:text-gray-500">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-gray-500", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};

================
File: src\components\ui\form.tsx
================
// src/components/ui/form.tsx
import * as React from "react";
import { useLanguage } from "@/hooks/useLanguage";

interface FormFieldProps {
  label: string;
  error?: string;
  required?: boolean;
  children: React.ReactNode;
}

export function FormField({ label, error, required, children }: FormFieldProps) {
  const { direction } = useLanguage();
  
  return (
    <div className="space-y-2">
      <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
        {label}
        {required && <span className="text-red-500 ml-1">*</span>}
      </label>
      {children}
      {error && (
        <p className={`text-sm text-red-500 ${direction === 'rtl' ? 'text-right' : 'text-left'}`}>
          {error}
        </p>
      )}
    </div>
  );
}

================
File: src\components\ui\input.tsx
================
// src/components/ui/input.tsx
import * as React from "react";
import { cn } from "@/lib/utils";
import { useLanguage } from "@/hooks/useLanguage";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  error?: string;
  icon?: React.ReactNode;
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, error, icon, ...props }, ref) => {
    const { direction } = useLanguage();
    
    return (
      <div className="relative">
        <input
          type={type}
          className={cn(
            "flex h-9 w-full rounded-md border border-gray-200 bg-white px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:cursor-not-allowed disabled:opacity-50",
            icon && (direction === 'rtl' ? 'pl-3 pr-9' : 'pl-9 pr-3'),
            error && "border-red-500 focus-visible:ring-red-500",
            className
          )}
          dir={direction}
          ref={ref}
          {...props}
        />
        {icon && (
          <div className={`absolute inset-y-0 ${direction === 'rtl' ? 'right-3' : 'left-3'} flex items-center pointer-events-none`}>
            {icon}
          </div>
        )}
        {error && (
          <p className="mt-1 text-sm text-red-500">{error}</p>
        )}
      </div>
    );
  }
);
Input.displayName = "Input";

export { Input };

================
File: src\components\ui\label.tsx
================
// src/components/ui/label.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cn } from "@/lib/utils"
import { useLanguage } from "@/hooks/useLanguage"

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { direction } = useLanguage()
  
  return (
    <LabelPrimitive.Root
      ref={ref}
      className={cn(
        "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
        direction === 'rtl' && "text-right",
        className
      )}
      {...props}
    />
  )
})
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src\components\ui\loading-spinner.tsx
================
// src/components/ui/loading-spinner.tsx
import { cn } from "@/lib/utils";

interface LoadingSpinnerProps {
    size?: 'sm' | 'md' | 'lg';
    className?: string;
  }
  
  function LoadingSpinner({ size = 'md', className }: LoadingSpinnerProps) {
    const sizeClasses = {
      sm: 'w-4 h-4',
      md: 'w-8 h-8',
      lg: 'w-12 h-12'
    };
  
    return (
      <div
        className={cn(
          "animate-spin rounded-full border-2 border-current border-t-transparent text-primary-600",
          sizeClasses[size],
          className
        )}
      />
    );
  }

export default LoadingSpinner;

================
File: src\components\ui\radio-group.tsx
================
// src/components/ui/radio-group.tsx
import * as React from "react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { Circle } from "lucide-react";
import { cn } from "@/lib/utils";

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-gray-200 text-gray-900 ring-offset-white focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export {
    RadioGroup,
    RadioGroupItem,
  };

================
File: src\components\ui\select.tsx
================
// src/components/ui/select.tsx
import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;
const SelectGroup = SelectPrimitive.Group;
const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between rounded-md border border-gray-200 bg-white px-3 py-2 text-sm shadow-sm ring-offset-white placeholder:text-gray-500 focus:outline-none focus:ring-1 focus:ring-gray-950 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-white text-gray-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

export {
    Select,
    SelectGroup,
    SelectValue,
    SelectTrigger,
    SelectContent,
    SelectItem
  };

================
File: src\components\ui\switch.tsx
================
// src/components/ui/switch.tsx
import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";
import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 focus-visible:ring-offset-white disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary-600 data-[state=unchecked]:bg-gray-200",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };

================
File: src\components\ui\table.tsx
================
// src/components/ui/table.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("bg-slate-900 font-medium text-slate-50", className)}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-slate-100/50 data-[state=selected]:bg-slate-100",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-slate-500 [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
}

================
File: src\components\ui\tabs.tsx
================
// src/components/ui/tabs.tsx
import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";
import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-gray-100 p-1 text-gray-500",
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-white data-[state=active]:text-gray-950 data-[state=active]:shadow",
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };

================
File: src\components\ui\textarea.tsx
================
// src/components/ui/textarea.tsx
import * as React from "react";
import { useLanguage } from "@/hooks/useLanguage";
import { cn } from "@/lib/utils";

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  error?: string;
}

export const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, error, ...props }, ref) => {
    const { direction } = useLanguage();
    
    return (
      <div>
        <textarea
          className={cn(
            "flex min-h-[60px] w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm shadow-sm placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:cursor-not-allowed disabled:opacity-50",
            error && "border-red-500 focus-visible:ring-red-500",
            className
          )}
          ref={ref}
          dir={direction}
          {...props}
        />
        {error && (
          <p className="mt-1 text-sm text-red-500">{error}</p>
        )}
      </div>
    );
  }
);
Textarea.displayName = "Textarea";

================
File: src\components\ui\toast.tsx
================
// src/components/ui/toast.tsx
import * as React from 'react';
import * as ToastPrimitives from '@radix-ui/react-toast';
import { AlertCircle, Check, Info, X } from 'lucide-react';
import { cn } from '@/lib/utils';
import { useLanguage } from '@/hooks/useLanguage';

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Root
    ref={ref}
    className={cn(
      'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full',
      className
    )}
    {...props}
  />
));
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastIcon = React.forwardRef<
  HTMLDivElement,
  { type?: 'success' | 'error' | 'info' | 'warning' }
>(({ type = 'info' }, ref) => {
  const icons = {
    success: <Check className="h-5 w-5 text-green-500" />,
    error: <AlertCircle className="h-5 w-5 text-red-500" />,
    info: <Info className="h-5 w-5 text-blue-500" />,
    warning: <AlertCircle className="h-5 w-5 text-yellow-500" />
  };

  return (
    <div ref={ref} className="flex-shrink-0">
      {icons[type]}
    </div>
  );
});
ToastIcon.displayName = 'ToastIcon';

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100',
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
));
ToastTitle.displayName = 'ToastTitle';

const ToastDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
));
ToastDescription.displayName = 'ToastDescription';

export {
  Toast,
  ToastIcon,
  ToastAction,
  ToastClose,
  ToastTitle,
  ToastDescription
};

================
File: src\config\responsive.ts
================
// src/config/responsive.ts
export const breakpoints = {
    xs: 0,
    sm: 640,
    md: 768,
    lg: 1024,
    xl: 1280,
    '2xl': 1536,
  } as const;
  
  export type Breakpoint = keyof typeof breakpoints;

================
File: src\config\i18n\translations\ar.ts
================
// src/config/i18n/translations/ar.ts
export const ar = {
  common: {
    search: 'بحث',
    loading: 'جاري التحميل...',
    error: 'حدث خطأ',
    success: 'تم بنجاح',
    cancel: 'إلغاء',
    save: 'حفظ',
    delete: 'حذف',
    edit: 'تعديل',
    back: 'رجوع',
    next: 'التالي',
    comingSoon: 'قريباً',
    downloading: 'جاري التنزيل...',
    sending: 'جاري الإرسال...',
    retry: 'حاول مرة أخرى',
  },
  auth: {
    login: 'تسجيل الدخول',
    logout: 'تسجيل الخروج',
    email: 'البريد الإلكتروني',
    password: 'كلمة المرور',
  },
  navigation: {
    home: 'الرئيسية',
    chat: 'المحادثة',
    library: 'المكتبة',
    search: 'البحث',
    calculator: 'الحاسبة',
    admin: 'المشرف',
    correction: 'تصحيح لغوي',
    templates: 'القوالب',
  },
  procurement: {
    systemName: 'نظام المنافسات والمشتريات الحكومية',
    communityName: 'مجتمع المشتريات الحكومية',
    searchPlaceholder: 'ابحث في النظام...',
  },
  chat: {
    // Welcome Section
    welcome: {
      title: "مساعد مجتمع المشتريات الحكومية الذكي",
      description: "اطرح أسئلتك حول نظام المنافسات والمشتريات الحكومية",
      getStarted: "ابدأ الآن",
    },
    // Chat Interface
    placeholder: "اكتب رسالتك هنا...",
    send: "إرسال",
    sending: "جاري الإرسال...",
    // Message Options
    saudiAccent: "لهجة سعودية",
    reasoning: "التفكير المنطقي",
    // Status Messages
    loading: "جاري التحميل...",
    error: "حدث خطأ",
    connecting: "جاري الاتصال...",
    reconnecting: "جاري إعادة الاتصال...",
    // Resources and Sources
    sources: "المصادر",
    article: "المادة",
    section: "الفصل",
    chapter: "الباب",
    content: "المحتوى",
    summary: "الملخص",
    // Suggested Questions
    suggestions: {
      title: "أو اختر من الأسئلة المقترحة",
      first: "ما هي شروط التأهيل المسبق للمنافسات الحكومية؟",
      second: "كيف يتم تقييم العروض في المنافسات الحكومية؟",
      third: "ما هي مدة سريان الضمان النهائي؟"
    },
    // Error Messages
    errorMessages: {
      failed: "فشل في إرسال الرسالة",
      network: "حدث خطأ في الشبكة",
      retry: "يرجى المحاولة مرة أخرى"
    }
  },
  library: {
    title: 'المكتبة',
    subtitle: 'تصفح وبحث المستندات',
    // Navigation
    root: 'المكتبة الرئيسية',
    goBack: 'العودة للمجلد السابق',
    // Actions
    downloadButton: 'تحميل',
    downloading: 'جاري التحميل...',
    openButton: 'فتح',
    viewButton: 'عرض',
    viewing: 'جاري الفتح...',
    // Search
    searchPlaceholder: 'البحث في الملفات والمجلدات...',
    deepSearch: 'بحث عميق (يشمل المجلدات الفرعية)',
    deepSearchTooltip: 'عند التفعيل، سيتم البحث في جميع المجلدات الفرعية',
    // Status messages
    loading: 'جاري التحميل...',
    error: 'حدث خطأ أثناء تحميل المحتوى',
    viewError: 'خطأ في عرض الملف',
    downloadError: 'خطأ في تحميل الملف',
    noResults: 'لم يتم العثور على ملفات أو مجلدات',
    emptyFolder: 'هذا المجلد فارغ',
    // File types
    folder: 'مجلد',
    file: 'ملف',
    // File information
    lastModified: 'آخر تعديل',
    fileSize: 'حجم الملف',
    // Tooltips
    downloadTooltip: 'تحميل هذا الملف',
    viewTooltip: 'عرض هذا الملف',
    openFolderTooltip: 'فتح هذا المجلد'
  },
  landing: {
    hero: {
      title: 'مجتمع المشتريات الحكومية',
      subtitle: 'نظام المنافسات والمشتريات الحكومية',
      description: 'منصة نضع فيها ما يهم موظفي المشتريات الحكومية وهي منصة غير رسمية ولكن عمل بسيط من زملاء لكم ونرجو ان نقدم من خلالها الفائدة المرجوة ولا تغني اطلاقاً عن العودة للنظام واللائحة والتعاميم ذات العلاقة',
      cta: 'ابدأ الآن',
      learnMore: 'اكتشف المزيد',
    },
    search: {
      placeholder: 'ابحث في النظام...',
    },
    features: {
      search: {
        title: 'بحث متقدم',
        description: 'بحث سهل وسريع في مواد النظام',
      },
      assistant: {
        title: 'مساعد مجتمع المشتريات الذكي',
        description: 'إجابات دقيقة لاستفساراتك في المشتريات الحكومية',
      },
      library: {
        title: 'مكتبة المشتريات',
        description: 'مجموعة شاملة من وثائق المشتريات الحكومية',
      },
    },
    faq: {
      title: 'الأسئلة الشائعة',
      items: [
        {
          question: 'كيف يمكنني البحث في النظام؟',
          answer: 'يمكنك استخدام شريط البحث الرئيسي أو تصفح الأقسام والفصول مباشرة',
        },
        {
          question: 'هل تكفي هذه المنصة عن العودة للنظام و اللائحة و التعاميم ذات العلاقة؟',
          answer: 'لا تكفي المنصة عن العودة للانظمه ذات العلاقه من مصادرها الرسمية ما نقدمه وسيلة مساعدة لا اكثر',
        },
        {
          question: 'كيف يمكنني تحميل النظام كاملاً؟',
          answer: 'يمكنك تحميل النظام كاملاً من قسم مكتبة المشتريات بصيغة PDF',
        },
      ],
    },
    stats: {
      articles: 'مادة في النظام',
      users: 'مستخدم نشط',
      accuracy: 'دقة الإجابات',
    },
    contact: {
      title: 'تواصل معنا',
      form: {
        name: 'الاسم',
        email: 'البريد الإلكتروني',
        message: 'الرسالة',
        send: 'إرسال الرسالة',
        sending: 'جاري الإرسال...',
        success: 'تم إرسال الرسالة بنجاح',
        error: 'فشل في إرسال الرسالة',
        required: 'جميع الحقول مطلوبة',
        invalidEmail: 'يرجى إدخال بريد إلكتروني صحيح'
      }
    },
  },
  search: {
    pageTitle: 'البحث في المواد',
    placeholder: 'ادخل كلمات البحث...',
    filterByType: 'تصفية حسب النوع',
    types: {
      both: 'جميع المصادر',
      system: 'نظام المنافسات والمشتريات الحكومية',
      regulation: 'اللائحة التنفيذية'
    },
    noResults: 'لم يتم العثور على نتائج لبحثك.',
    tryAgain: 'يرجى تجربة كلمات مختلفة أو تغيير عوامل التصفية.',
    errorMessage: 'فشل في جلب نتائج البحث. يرجى المحاولة مرة أخرى.',
    article: 'المادة',
    chapter: 'الباب',
    section: 'الفصل',
    content: 'المحتوى',
    summary: 'الملخص',
    keywords: 'الكلمات المفتاحية',
    references: 'المراجع',
    searching: 'جاري البحث...',
    loadingMore: 'جاري تحميل المزيد من النتائج...',
    filters: {
      title: 'عوامل التصفية',
      clearAll: 'مسح جميع عوامل التصفية',
      apply: 'تطبيق عوامل التصفية'
    }
  },
  admin: {
    login: {
      title: 'تسجيل دخول المشرف',
      username: 'اسم المستخدم',
      password: 'كلمة المرور',
      submit: 'تسجيل الدخول',
      error: 'بيانات غير صحيحة'
    },
    contacts: {
      title: 'رسائل التواصل',
      date: 'التاريخ',
      name: 'الاسم',
      email: 'البريد الإلكتروني',
      message: 'الرسالة',
      export: 'تصدير CSV',
      noData: 'لا توجد رسائل تواصل',
      error: 'فشل في تحميل الرسائل'
    },
    logout: 'تسجيل الخروج'
  },
  correction: {
    title: 'أداة تصحيح النصوص',
    inputLabel: 'أدخل النص للتصحيح',
    inputPlaceholder: 'اكتب أو الصق النص هنا...',
    outputLabel: 'النص المصحح',
    correct: 'تصحيح النص',
    correcting: 'جاري التصحيح...',
    error: 'حدث خطأ أثناء تصحيح النص.',
    success: 'تم تصحيح النص بنجاح.',
  },
  calculator: {
    title: 'أدوات حاسبة المشتريات',
    tabs: {
      percentage: 'النسبة المئوية',
      vat: 'الضريبة',
      amount: 'المبلغ مع نسبة',
      date: 'التواريخ',
      tafqit: 'التفقيط'
    },
    // Percentage Calculator
    percentage: {
      title: 'حساب النسبة المئوية',
      baseAmount: 'المبلغ الأساسي',
      newAmount: 'المبلغ الجديد',
      calculate: 'احسب النسبة',
      result: 'النتيجة'
    },
    // VAT Calculator
    vat: {
      title: 'حساب الضريبة',
      operation: {
        label: 'نوع العملية',
        total: 'حساب المبلغ مع الضريبة',
        extract: 'استخراج المبلغ الأصلي من مبلغ الضريبة',
        amount: 'حساب مبلغ الضريبة'
      },
      amount: 'المبلغ',
      rate: 'نسبة الضريبة',
      calculate: 'احسب',
      results: {
        net: 'المبلغ الصافي',
        vat: 'مبلغ الضريبة',
        total: 'المبلغ الإجمالي'
      }
    },
    // Amount with Percentage
    amountPercentage: {
      title: 'حساب المبلغ مع النسبة',
      amount: 'المبلغ',
      percentage: 'النسبة',
      calculate: 'احسب',
      results: {
        original: 'المبلغ الأصلي',
        adjustment: 'مبلغ التعديل',
        final: 'المبلغ النهائي'
      }
    },
    // Date Calculator
    date: {
      conversion: {
        title: 'تحويل التواريخ'
      },
      gregorian: {
        label: 'التاريخ الميلادي',
        convert: 'حول إلى هجري',
        result: 'التاريخ الهجري'
      },
      hijri: {
        label: 'التاريخ الهجري',
        convert: 'حول إلى ميلادي',
        current: 'التاريخ الهجري الحالي',
        placeholder: 'مثال: 1445/07/29',
        result: 'التاريخ الميلادي'
      },
      difference: {
        title: 'حساب الفرق بين تاريخين',
        start: 'تاريخ البداية',
        end: 'تاريخ النهاية',
        calculate: 'احسب الفرق',
        years: 'السنوات',
        months: 'الشهور',
        days: 'الأيام',
        result: 'الفرق بين التاريخين'
      },
      duration: {
        title: 'حساب تاريخ النهاية',
        start: 'تاريخ البداية',
        duration: {
          label: 'المدة',
          days: 'الأيام',
          months: 'الشهور',
          years: 'السنوات'
        },
        calculate: 'احسب تاريخ النهاية',
        result: 'تاريخ النهاية',
        resultFormat: '{gregorian} (هجري: {hijri})',
        separator: ' و ',
        validation: {
          required: 'يجب إدخال مدة واحدة على الأقل (أيام، شهور، أو سنوات)'
        }
      },
      hijriDuration: {
        title: 'حساب المدة بالتقويم الهجري',
        start: 'تاريخ البداية (هجري)',
        calculate: 'احسب تاريخ النهاية',
        result: 'تاريخ النهاية الهجري',
        placeholder: 'أدخل التاريخ بتنسيق: 1445/07/29'
      },
      units: {
        year: 'سنة',
        years: 'سنوات',
        month: 'شهر',
        months: 'شهور',
        day: 'يوم',
        days: 'أيام'
      }
    },
    // Tafqit
    tafqit: {
      title: 'تفقيط المبلغ',
      amount: 'المبلغ',
      language: 'اللغة',
      languages: {
        arabic: 'العربية',
        english: 'الإنجليزية'
      },
      convert: 'حول إلى كلمات',
      result: 'النتيجة',
      placeholder: 'أدخل المبلغ'
    },
    // Common
    common: {
      validation: {
        required: 'هذا الحقل مطلوب',
        invalidDate: 'تاريخ غير صحيح',
        invalidNumber: 'رقم غير صحيح',
        endDateBeforeStart: 'تاريخ النهاية يجب أن يكون بعد تاريخ البداية',
        positiveNumber: 'يجب أن يكون الرقم موجباً'
      },
      loading: 'جاري الحساب...',
      error: 'حدث خطأ في العملية',
      reset: 'إعادة تعيين',
      calculate: 'احسب',
      back: 'رجوع'
    }
  },
  templates: {
    title: 'قوالب المستندات',
    placeholders: 'الحقول المطلوبة',
    generate: 'إنشاء المستند',
    generation: {
      success: 'تم إنشاء المستند بنجاح',
      error: 'خطأ في إنشاء المستند'
    },
    download: {
      docx: 'تحميل DOCX',
      pdf: 'تحميل PDF',
      success: 'تم تحميل المستند بنجاح',
      error: 'خطأ في تحميل المستند'
    },
    email: {
      button: 'إرسال عبر البريد الإلكتروني',
      title: 'إرسال المستند',
      recipient: 'البريد الإلكتروني للمستلم',
      subject: 'الموضوع',
      body: 'الرسالة',
      send: 'إرسال',
      success: 'تم إرسال البريد الإلكتروني بنجاح',
      error: 'خطأ في إرسال البريد الإلكتروني'
    }
  }
};

================
File: src\config\i18n\translations\en.ts
================
// src/config/i18n/translations/en.ts
export const en = {
  common: {
    search: 'Search',
    loading: 'Loading...',
    error: 'An error occurred',
    success: 'Success',
    cancel: 'Cancel',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    back: 'Back',
    next: 'Next',
    comingSoon: 'Coming Soon',
    downloading: 'Downloading...',
    sending: 'Sending...',
    retry: 'Try Again',
  },
  auth: {
    login: 'Login',
    logout: 'Logout',
    email: 'Email',
    password: 'Password',
  },
  navigation: {
    home: 'Home',
    chat: 'Chat',
    library: 'Library',
    search: 'Search',
    calculator: 'Calculator',
    admin: 'Admin',
    correction: 'correction',
    templates: 'Templates',
  },
  procurement: {
    systemName: 'Government Procurement System',
    communityName: 'Government Procurement Community',
    searchPlaceholder: 'Search regulations...',
  },
  chat: {
    // Welcome Section
    welcome: {
      title: "Smart Government Procurement Assistant",
      description: "Ask your questions about the Government Procurement System",
      getStarted: "Get Started",
    },
    // Chat Interface
    placeholder: "Type your message here...",
    send: "Send",
    sending: "Sending...",
    // Message Options
    saudiAccent: "Saudi Accent",
    reasoning: "Logical Reasoning",
    // Status Messages
    loading: "Loading...",
    error: "An error occurred",
    connecting: "Connecting...",
    reconnecting: "Reconnecting...",
    // Resources and Sources
    sources: "Sources",
    article: "Article",
    section: "Section",
    chapter: "Chapter",
    content: "Content",
    summary: "Summary",
    // Suggested Questions
    suggestions: {
      title: "Or choose from suggested questions",
      first: "What are the pre-qualification requirements for government tenders?",
      second: "How are bids evaluated in government tenders?",
      third: "What is the validity period of the final guarantee?"
    },
    // Error Messages
    errorMessages: {
      failed: "Failed to send message",
      network: "Network error occurred",
      retry: "Please try again"
    }
  },
  library: {
    title: 'Library',
    subtitle: 'Browse and search documents',
    // Navigation
    root: 'Library Root',
    goBack: 'Back to Parent Folder',
    // Actions
    downloadButton: 'Download',
    downloading: 'Downloading...',
    openButton: 'Open',
    viewButton: 'View',
    viewing: 'Opening...',
    // Search
    searchPlaceholder: 'Search for files and folders...',
    deepSearch: 'Deep search (include subfolders)',
    deepSearchTooltip: 'When enabled, search will look through all subfolders',
    // Status messages
    loading: 'Loading...',
    error: 'An error occurred while loading the content',
    viewError: 'Error viewing file',
    downloadError: 'Error downloading file',
    noResults: 'No files or folders found',
    emptyFolder: 'This folder is empty',
    // File types
    folder: 'Folder',
    file: 'File',
    // File information
    lastModified: 'Last modified',
    fileSize: 'File size',
    // Tooltips
    downloadTooltip: 'Download this file',
    viewTooltip: 'View this file',
    openFolderTooltip: 'Open this folder'
  },
  // New landing page translations
  landing: {
    hero: {
      title: 'Government Procurement Community',
      subtitle: 'Government Procurement & Competition System',
      description: 'A platform where we place what matters to government procurement employees. It is an unofficial platform but a simple effort from your colleagues. We hope to provide the intended benefit through it, but it does not substitute in any way for referring to the system, regulations, and related circulars.',
      cta: 'Get Started',
      learnMore: 'Learn More',
    },
    search: {
      placeholder: 'Search regulations...',
    },
    features: {
      search: {
        title: 'Advanced Search',
        description: 'Fast and easy search through regulations',
      },
      assistant: {
        title: 'Smart Assistant',
        description: 'Accurate answers for your procurement inquiries',
      },
      library: {
        title: 'Procurement Library',
        description: 'Comprehensive procurement document collection',
      },
    },
    faq: {
      title: 'FAQ',
      items: [
        {
          question: 'How can I search the regulations?',
          answer: 'You can use the main search bar or browse through sections and chapters directly',
        },
        {
          question: 'Does this platform suffice as a substitute for referring to the system, regulations, and related circulars?',
          answer: 'No, the platform does not replace referring to the related systems from their official sources. What we provide is merely a helpful tool, nothing more.',
        },
        {
          question: 'How can I download the complete regulation?',
          answer: 'You can download the complete regulation from the procurement library section in PDF format',
        },
      ],
    },
    stats: {
      articles: 'System Articles',
      users: 'Active Users',
      accuracy: 'Answer Accuracy',
    },
    contact: {
      title: 'Contact Us',
      form: {
        name: 'Name',
        email: 'Email',
        message: 'Message',
        send: 'Send Message',
        sending: 'Sending...',
        success: 'Message sent successfully',
        error: 'Failed to send message',
        required: 'All fields are required',
        invalidEmail: 'Please enter a valid email'
      }
    }
  },
  search: {
    pageTitle: 'Search Articles',
    placeholder: 'Enter your search keywords...',
    filterByType: 'Filter by Type',
    types: {
      both: 'All Resources',
      system: 'Government Tenders and Procurement System',
      regulation: 'Implementing Regulations'
    },
    noResults: 'No results found for your search.',
    tryAgain: 'Please try different keywords or filters.',
    errorMessage: 'Failed to fetch search results. Please try again.',
    article: 'Article',
    chapter: 'Chapter',
    section: 'Section',
    content: 'Content',
    summary: 'Summary',
    keywords: 'Keywords',
    references: 'References',
    searching: 'Searching...',
    loadingMore: 'Loading more results...',
    filters: {
      title: 'Search Filters',
      clearAll: 'Clear all filters',
      apply: 'Apply Filters'
    }
  },
  admin: {
    login: {
      title: 'Admin Login',
      username: 'Username',
      password: 'Password',
      submit: 'Login',
      error: 'Invalid credentials'
    },
    contacts: {
      title: 'Contact Submissions',
      date: 'Date',
      name: 'Name',
      email: 'Email',
      message: 'Message',
      export: 'Export CSV',
      noData: 'No contact submissions found',
      error: 'Failed to load contacts'
    },
    logout: 'Logout'
  },
  correction: {
    title: 'Text Correction Tool',
    inputLabel: 'Enter Text to Correct',
    inputPlaceholder: 'Type or paste your text here...',
    outputLabel: 'Corrected Text',
    correct: 'Correct Text',
    correcting: 'Correcting...',
    error: 'An error occurred while correcting the text.',
    success: 'Text corrected successfully.',
  },
  calculator: {
    title: 'Procurement Calculator Tools',
    tabs: {
      percentage: 'Percentage',
      vat: 'VAT',
      amount: 'Amount with Percentage',
      date: 'Dates',
      tafqit: 'Numbers to Words'
    },
    percentage: {
      title: 'Percentage Calculator',
      baseAmount: 'Base Amount',
      newAmount: 'New Amount',
      calculate: 'Calculate Percentage',
      result: 'Result'
    },
    vat: {
      title: 'VAT Calculator',
      operation: {
        label: 'Operation Type',
        total: 'Calculate Total with VAT',
        extract: 'Extract Original Amount from VAT',
        amount: 'Calculate VAT Amount'
      },
      amount: 'Amount',
      rate: 'VAT Rate',
      calculate: 'Calculate',
      results: {
        net: 'Net Amount',
        vat: 'VAT Amount',
        total: 'Total Amount'
      }
    },
    amountPercentage: {
      title: 'Amount with Percentage Calculator',
      amount: 'Amount',
      percentage: 'Percentage',
      calculate: 'Calculate',
      results: {
        original: 'Original Amount',
        adjustment: 'Adjustment Amount',
        final: 'Final Amount'
      }
    },
    date: {
      conversion: {
        title: 'Date Conversion'
      },
      gregorian: {
        label: 'Gregorian Date',
        convert: 'Convert to Hijri',
        result: 'Hijri Date'
      },
      hijri: {
        label: 'Hijri Date',
        convert: 'Convert to Gregorian',
        current: 'Current Hijri Date',
        placeholder: 'Example: 1445/07/29',
        result: 'Gregorian Date'
      },
      difference: {
        title: 'Calculate Date Difference',
        start: 'Start Date',
        end: 'End Date',
        calculate: 'Calculate Difference',
        years: 'Years',
        months: 'Months',
        days: 'Days',
        result: 'Date Difference'
      },
      duration: {
        title: 'Calculate End Date',
        start: 'Start Date',
        duration: {
          label: 'Duration',
          days: 'Days',
          months: 'Months',
          years: 'Years'
        },
        calculate: 'Calculate End Date',
        result: 'End Date',
        resultFormat: '{gregorian} (Hijri: {hijri})',
        separator: ' and ',
        validation: {
          required: 'At least one duration field (days, months, or years) is required'
        }
      },
      hijriDuration: {
        title: 'Calculate Duration in Hijri Calendar',
        start: 'Start Date (Hijri)',
        calculate: 'Calculate End Date',
        result: 'Hijri End Date',
        placeholder: 'Enter date in format: 1445/07/29'
      },
      units: {
        year: 'year',
        years: 'years',
        month: 'month',
        months: 'months',
        day: 'day',
        days: 'days'
      }
    },
    tafqit: {
      title: 'Numbers to Words',
      amount: 'Amount',
      language: 'Language',
      languages: {
        arabic: 'Arabic',
        english: 'English'
      },
      convert: 'Convert to Words',
      result: 'Result',
      placeholder: 'Enter amount'
    },
    common: {
      validation: {
        required: 'This field is required',
        invalidDate: 'Invalid date',
        invalidNumber: 'Invalid number',
        endDateBeforeStart: 'End date must be after start date',
        positiveNumber: 'Number must be positive'
      },
      loading: 'Calculating...',
      error: 'An error occurred',
      reset: 'Reset',
      calculate: 'Calculate',
      back: 'Back'
    }
  },
  templates: {
    title: 'Document Templates',
    fields: 'Required Fields',
    generate: 'Generate Document',
    back: 'Back to Templates',
    generation: {
      success: 'Document generated successfully',
      error: 'Error generating document'
    },
    download: {
      docx: 'Download DOCX',
      pdf: 'Download PDF',
      success: 'Document downloaded successfully',
      error: 'Error downloading document'
    },
    email: {
      button: 'Send via Email',
      title: 'Send Document',
      recipient: 'Recipient Email',
      subject: 'Subject',
      body: 'Message',
      send: 'Send Email',
      success: 'Email sent successfully',
      error: 'Error sending email'
    }
  }
};

================
File: src\features\admin\components\ContactsTable.tsx
================
// src/features/admin/components/ContactsTable.tsx
import { Contact } from '@/types/admin';
import { useLanguage } from '@/hooks/useLanguage';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

interface ContactsTableProps {
  contacts: Contact[];
}

export function ContactsTable({ contacts }: ContactsTableProps) {
  const { t } = useLanguage();

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>{t('admin.contacts.date')}</TableHead>
            <TableHead>{t('admin.contacts.name')}</TableHead>
            <TableHead>{t('admin.contacts.email')}</TableHead>
            <TableHead>{t('admin.contacts.message')}</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {contacts.map((contact, index) => (
            <TableRow key={index}>
              <TableCell>{contact.Date}</TableCell>
              <TableCell>{contact.Name}</TableCell>
              <TableCell>{contact.Email}</TableCell>
              <TableCell>{contact.Message}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}

================
File: src\features\admin\components\LoginForm.tsx
================
// src/features/admin/components/LoginForm.tsx
import { useState } from 'react';
import { useLanguage } from '@/hooks/useLanguage';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Credentials } from '@/types/admin';

interface LoginFormProps {
  onSubmit: (credentials: Credentials) => void;
  isLoading: boolean;
  error?: string;
}

export function LoginForm({ onSubmit, isLoading, error }: LoginFormProps) {
  const { t } = useLanguage();
  const [credentials, setCredentials] = useState<Credentials>({
    username: '',
    password: ''
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(credentials);
  };

  return (
    <div className="max-w-md w-full mx-auto">
      <Card>
        <CardHeader>
          <CardTitle>{t('admin.login.title')}</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="username">{t('admin.login.username')}</Label>
              <Input
                id="username"
                type="text"
                value={credentials.username}
                onChange={(e) => setCredentials(prev => ({ 
                  ...prev, 
                  username: e.target.value 
                }))}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">{t('admin.login.password')}</Label>
              <Input
                id="password"
                type="password"
                value={credentials.password}
                onChange={(e) => setCredentials(prev => ({ 
                  ...prev, 
                  password: e.target.value 
                }))}
                required
              />
            </div>
            {error && (
              <div className="text-sm text-red-500">
                {error}
              </div>
            )}
            <Button 
              type="submit" 
              className="w-full"
              disabled={isLoading}
            >
              {isLoading ? t('common.loading') : t('admin.login.submit')}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src\features\chat\components\ChatInterface.tsx
================
// src/features/chat/components/ChatInterface.tsx
import { useState, useRef, useEffect } from 'react';
import { Send } from 'lucide-react';
import { useLanguage } from '@/hooks/useLanguage';
import { ChatMessage, ChatOptions } from '@/types';
import { MessageBubble } from './MessageBubble';
import { LoadingIndicator } from './LoadingIndicator';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';

interface ChatInterfaceProps {
  messages: ChatMessage[];
  onSendMessage: (message: string, options: ChatOptions) => void;
  isLoading: boolean;
}

export function ChatInterface({ 
  messages, 
  onSendMessage, 
  isLoading 
}: ChatInterfaceProps) {
  const { t, direction } = useLanguage();
  const [input, setInput] = useState('');
  const [options, setOptions] = useState<ChatOptions>({
    saudiAccent: false,
    reasoning: false
  });
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const formRef = useRef<HTMLFormElement>(null);
  const [formHeight, setFormHeight] = useState(0);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim()) {
      onSendMessage(input, options);
      setInput('');
    }
  };

  // Update form height when content changes
  useEffect(() => {
    const updateFormHeight = () => {
      if (formRef.current) {
        setFormHeight(formRef.current.offsetHeight);
      }
    };

    const resizeObserver = new ResizeObserver(updateFormHeight);
    if (formRef.current) {
      resizeObserver.observe(formRef.current);
    }

    return () => resizeObserver.disconnect();
  }, []);

  // Scroll to bottom on new messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div className="relative h-screen flex justify-center">
      <div
        className="absolute top-0 bottom-0 w-full max-w-3xl mx-auto overflow-y-auto px-4 md:px-0"
        style={{
          paddingBottom: `${formHeight + 16}px`,
          scrollbarWidth: 'none',
          msOverflowStyle: 'none'
        }}
      >
        <div className="space-y-4 py-4">
          {messages.map((message, index) => (
            <MessageBubble
              key={index}
              message={message}
            />
          ))}
          {isLoading && <LoadingIndicator />}
          <div ref={messagesEndRef} />
        </div>
      </div>

      <form
        ref={formRef}
        onSubmit={handleSubmit}
        className="fixed bottom-0 left-0 right-0 p-4 border-t border-slate-700 bg-slate-900/95 backdrop-blur-sm"
      >
        <div className="max-w-2xl mx-auto space-y-4">
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <Checkbox
                id="saudiAccent"
                checked={options.saudiAccent}
                onCheckedChange={(checked) => 
                  setOptions(prev => ({ ...prev, saudiAccent: checked as boolean }))
                }
              />
              <Label htmlFor="saudiAccent">{t('chat.saudiAccent')}</Label>
            </div>
            <div className="flex items-center gap-2">
              <Checkbox
                id="reasoning"
                checked={options.reasoning}
                onCheckedChange={(checked) => 
                  setOptions(prev => ({ ...prev, reasoning: checked as boolean }))
                }
              />
              <Label htmlFor="reasoning">{t('chat.reasoning')}</Label>
            </div>
          </div>

          <div className="relative">
            <Textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder={t('chat.placeholder')}
              className="min-h-[80px] pr-[100px]"
              dir={direction}
            />
            <Button
              type="submit"
              className="absolute bottom-2 right-2"
              disabled={isLoading || !input.trim()}
            >
              <Send className="mr-2 h-4 w-4" />
              {t('chat.send')}
            </Button>
          </div>
        </div>
      </form>

      <style>{`
        ::-webkit-scrollbar {
          display: none;
        }
      `}</style>
    </div>
  );
}

================
File: src\features\chat\components\LoadingIndicator.tsx
================
// src/features/chat/components/LoadingIndicator.tsx
import { useLanguage } from '@/hooks/useLanguage';
import { Card, CardContent } from '@/components/ui/card';
import LoadingSpinner from '@/components/ui/loading-spinner';

export function LoadingIndicator() {
  const { t } = useLanguage();
  
  return (
    <div className="max-w-[80%] mx-auto">
      <Card className="bg-slate-800/50 border-slate-700">
        <CardContent className="p-4 flex items-center justify-center gap-2">
          <LoadingSpinner size="sm" />
          <span>{t('chat.loading')}</span>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src\features\chat\components\MessageBubble.tsx
================
// src/features/chat/components/MessageBubble.tsx
import { ChatMessage } from '@/types';
import { Card, CardContent } from '@/components/ui/card';
import { useLanguage } from '@/hooks/useLanguage';
import { ResourceCard } from './ResourceCard';

interface MessageBubbleProps {
  message: ChatMessage;
}

export function MessageBubble({ message }: MessageBubbleProps) {
  const { t, direction } = useLanguage();
  const isUser = message.role === 'user';

  return (
    <div className={`max-w-[80%] ${isUser ? 'ml-auto' : 'mr-auto'}`}>
      <Card className={`
        ${isUser 
          ? 'bg-gradient-to-r from-primary-600 to-primary-700 text-white border-0' 
          : 'bg-slate-800/50 border-slate-700'
        }
      `}>
        <CardContent className="p-4">
          <p className="whitespace-pre-wrap">
            {message.content}
          </p>
          
          {message.resources && message.resources.length > 0 && (
            <div className="mt-4 space-y-2">
              <h4 className="text-sm text-slate-300">
                {t('chat.sources')}:
              </h4>
              <div className="space-y-2">
                {message.resources.map((resource, index) => (
                  <ResourceCard
                    key={index}
                    resource={resource}
                  />
                ))}
              </div>
            </div>
          )}
          
          <div className="text-xs text-slate-400 mt-2">
            {new Date(message.timestamp).toLocaleTimeString(
              direction === 'rtl' ? 'ar-SA' : 'en-US'
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: src\features\chat\components\ResourceCard.tsx
================
// src/features/chat/components/ResourceCard.tsx
import { useState } from 'react';
import { ChevronDown, ChevronUp, FileText } from 'lucide-react';
import { Resource } from '@/types';
import { useLanguage } from '@/hooks/useLanguage';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

interface ResourceCardProps {
  resource: Resource;
}

export function ResourceCard({ resource }: ResourceCardProps) {
  const { t } = useLanguage();
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <Card className="bg-slate-700/50 border-slate-600 hover:bg-slate-700/70 transition-colors">
      <CardHeader className="cursor-pointer" onClick={() => setIsExpanded(!isExpanded)}>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <FileText className="text-primary-400" size={20} />
            <div>
              <CardTitle className="text-sm">
                {t('chat.article')} {resource.metadata.article_number}
              </CardTitle>
              <p className="text-xs text-slate-400">
                {resource.metadata.chapter_name}
              </p>
            </div>
          </div>
          <Badge variant="secondary">
            {resource.metadata.article_type}
          </Badge>
        </div>
      </CardHeader>
      
      {isExpanded && (
        <CardContent>
          <div className="space-y-2">
            <div>
              <h4 className="text-sm font-medium mb-1">{t('chat.content')}</h4>
              <p className="text-sm text-slate-300 whitespace-pre-wrap">
                {resource.content}
              </p>
            </div>
            <div>
              <h4 className="text-sm font-medium mb-1">{t('chat.summary')}</h4>
              <p className="text-sm text-slate-300">
                {resource.metadata.summary}
              </p>
            </div>
          </div>
        </CardContent>
      )}
    </Card>
  );
}

================
File: src\features\chat\components\WelcomeSection.tsx
================
// src/features/chat/components/WelcomeSection.tsx
import { MessageSquare } from 'lucide-react';
import { useLanguage } from '@/hooks/useLanguage';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

interface WelcomeSectionProps {
  onSuggestionClick: (suggestion: string) => void;
}

export function WelcomeSection({ onSuggestionClick }: WelcomeSectionProps) {
  const { t } = useLanguage();

  const suggestions = [
    t('chat.suggestions.first'),
    t('chat.suggestions.second'),
    t('chat.suggestions.third')
  ];

  return (
    <div className="flex flex-col items-center py-12 px-4 text-white">
      <div className="w-24 h-24 rounded-full bg-primary-600/10 flex items-center justify-center mb-6">
        <MessageSquare className="w-12 h-12 text-primary-600" />
      </div>
      
      <h1 className="text-3xl font-bold text-center mb-3 bg-clip-text text-transparent bg-gradient-to-r from-primary-400 to-primary-600">
        {t('chat.welcome.title')}
      </h1>
      
      <p className="text-slate-300 mb-8 text-center max-w-2xl">
        {t('chat.welcome.description')}
      </p>

      <div className="w-full max-w-4xl grid gap-4 md:grid-cols-3">
        {suggestions.map((suggestion, index) => (
          <Card 
            key={index}
            className="bg-slate-800/50 border-slate-700 hover:border-primary-500 transition-colors cursor-pointer"
            onClick={() => onSuggestionClick(suggestion)}
          >
            <CardContent className="p-6">
              <p>{suggestion}</p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

================
File: src\features\landing\components\ContactSection.tsx
================
// src/features/landing/components/ContactSection.tsx
import { useState } from 'react';
import { useLanguage } from "@/hooks/useLanguage";
import { Card} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/useToast";
import { Loader } from "lucide-react";
import { useAdmin } from '@/hooks/api/useAdmin';

interface ContactForm {
  name: string;
  email: string;
  message: string;
}

export function ContactSection() {
  const { t, direction } = useLanguage();
  const { addToast } = useToast();
  const { submitContact } = useAdmin();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [form, setForm] = useState<ContactForm>({
    name: '',
    email: '',
    message: '',
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      await submitContact({
        Name: form.name,
        Email: form.email,
        Message: form.message
      });

      // Clear form and show success message
      addToast(t('landing.contact.form.success'), { type: 'success' });
      setForm({ name: '', email: '', message: '' });
    } catch (error) {
      addToast(t('landing.contact.form.error'), { type: 'error' });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="bg-gradient-to-br from-primary-600 via-primary-700 to-primary-800 text-white py-24">
      <div className="max-w-7xl mx-auto px-6">
        <div className="grid md:grid-cols-2 gap-12">
          <div className={direction === 'rtl' ? 'order-2' : 'order-1'}>
            <h2 className="text-3xl font-bold mb-6">
              {t('landing.contact.title')}
            </h2>
            <div className="space-y-4">
              {/* Add your contact details here */}
              <div className="flex items-center gap-4">
                <a 
                  href="https://www.linkedin.com/in/yousefalmazyad" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-white hover:text-gray-200 transition-colors"
                >
                  Yousef Almazyad
                </a>
              </div>
            </div>
          </div>

          <Card className={`bg-white/10 backdrop-blur-lg border-0 ${direction === 'rtl' ? 'order-1' : 'order-2'}`}>
            <form onSubmit={handleSubmit} className="space-y-4">
              <Input
                placeholder={t('landing.contact.form.name')}
                value={form.name}
                onChange={(e) => setForm(prev => ({ ...prev, name: e.target.value }))}
                className="bg-white/20 border-0 text-white placeholder:text-white/70"
              />
              <Input
                type="email"
                placeholder={t('landing.contact.form.email')}
                value={form.email}
                onChange={(e) => setForm(prev => ({ ...prev, email: e.target.value }))}
                className="bg-white/20 border-0 text-white placeholder:text-white/70"
              />
              <Textarea
                placeholder={t('landing.contact.form.message')}
                value={form.message}
                onChange={(e: { target: { value: any; }; }) => setForm(prev => ({ ...prev, message: e.target.value }))}
                className="bg-white/20 border-0 text-white placeholder:text-white/70"
                rows={4}
              />
              <Button
                type="submit"
                variant="secondary"
                className="w-full"
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <Loader className="w-4 h-4 mr-2 animate-spin" />
                    {t('landing.contact.form.sending')}
                  </>
                ) : (
                  t('landing.contact.form.send')
                )}
              </Button>
            </form>
          </Card>
        </div>
      </div>
    </div>
  );
}

================
File: src\features\landing\components\FaqSection.tsx
================
// src/features/landing/components/FaqSection.tsx
import { useLanguage } from "@/hooks/useLanguage";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";

interface FaqItem {
  question: string;
  answer: string;
}

export function FaqSection() {
  const { t, direction } = useLanguage();

  // Get FAQ items from translations
  const faqItems = t('landing.faq.items', undefined, true) as FaqItem[];

  return (
    <div className="max-w-7xl mx-auto px-6 py-24">
      <h2 className="text-3xl font-bold text-center mb-12">{t('landing.faq.title')}</h2>
      <div className="grid md:grid-cols-2 gap-8">
        {faqItems.map((item, index) => (
          <Card key={index} className="hover:shadow-lg transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-xl">{item.question}</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-600">{item.answer}</p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

================
File: src\features\landing\components\FeatureCard.tsx
================
// src/features/landing/components/FeatureCard.tsx
import { LucideIcon } from "lucide-react";
import { useLanguage } from "@/hooks/useLanguage";
import { Card, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";

interface FeatureCardProps {
  icon: LucideIcon;
  title: string;
  description: string;
  isAvailable?: boolean;
  onClick?: () => void;
}

export function FeatureCard({
  icon: Icon,
  title,
  description,
  isAvailable = true,
  onClick,
}: FeatureCardProps) {
  const { t } = useLanguage();

  return (
    <Card
      className={`relative transition-all duration-300 transform hover:-translate-y-2 ${
        isAvailable ? 'cursor-pointer' : 'cursor-default'
      }`}
      onClick={isAvailable ? onClick : undefined}
    >
      {!isAvailable && (
        <div className="absolute inset-0 bg-gradient-to-b from-gray-900/90 to-gray-900/50 flex items-center justify-center transition-opacity duration-300 opacity-0 hover:opacity-100 rounded-xl">
          <span className="text-white text-lg font-semibold">
            {t('common.comingSoon')}
          </span>
        </div>
      )}
      <CardHeader>
        <div className="flex items-center gap-4">
          <div className="w-12 h-12 rounded-full bg-primary-100 flex items-center justify-center">
            <Icon className="w-6 h-6 text-primary-600" />
          </div>
          <div>
            <CardTitle>{title}</CardTitle>
            <CardDescription>{description}</CardDescription>
          </div>
        </div>
      </CardHeader>
    </Card>
  );
}

================
File: src\features\landing\components\FooterSection.tsx
================
// src/features/landing/components/FooterSection.tsx
import { useLanguage } from "@/hooks/useLanguage";

export function FooterSection() {
  const { t } = useLanguage();

  return (
    <footer className="bg-gray-900 text-white py-12">
      <div className="max-w-7xl mx-auto px-6">
        <div className="grid md:grid-cols-4 gap-8">
          <div className="space-y-4">
            <h3 className="font-bold text-lg">
              {t('procurement.communityName')}
            </h3>
            <p className="text-gray-400">Â© {new Date().getFullYear()} All rights reserved</p>
          </div>
          {/* Add more footer content as needed */}
        </div>
      </div>
    </footer>
  );
}

================
File: src\features\landing\components\HeroSection.tsx
================
// src/features/landing/components/HeroSection.tsx
import { useLanguage } from "@/hooks/useLanguage";
import { Button } from "@/components/ui/button";
import { useNavigate } from "react-router-dom";

export function HeroSection() {
  const { t } = useLanguage();
  const navigate = useNavigate();

  return (
    <div className="bg-gradient-to-br from-primary-600 via-primary-700 to-primary-800 text-white pt-32 pb-20">
      <div className="max-w-7xl mx-auto px-6">
        <div className="grid md:grid-cols-2 gap-12 items-center">
          <div className="space-y-6">
            <h1 className="text-4xl md:text-5xl font-bold leading-tight hero-title">
              {t('landing.hero.title')}
            </h1>
            <p className="text-xl opacity-90">
              {t('landing.hero.description')}
            </p>
            <div className="flex flex-wrap gap-4">
              <Button
                size="lg"
                variant="secondary"
                onClick={() => navigate('/chat')}
              >
                {t('landing.hero.cta')}
              </Button>
              <Button
                size="lg"
                variant="outline"
                className="border-white text-white hover:bg-white/10"
              >
                {t('landing.hero.learnMore')}
              </Button>
            </div>
          </div>
          <div className="relative">
            <div className="absolute inset-0 bg-gradient-to-r from-primary-500/20 to-primary-700/20 rounded-3xl" />
            <img
              src="/images/logo192.png"
              alt="System Interface"
              className="rounded-3xl shadow-2xl transform transition-transform duration-500 hover:scale-105"
            />
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src\features\landing\components\SearchSection.tsx
================
// src/features/landing/components/SearchSection.tsx
import { Search } from "lucide-react";
import { Input } from "@/components/ui/input";
import { useLanguage } from "@/hooks/useLanguage";
import { useNavigate } from "react-router-dom";
import { useState } from "react";

export function SearchSection() {
  const { t, direction } = useLanguage();
  const navigate = useNavigate();
  const [query, setQuery] = useState('');

  const handleSearch = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && query.trim()) {
      navigate('/chat', { state: { initialQuestion: query } });
    }
  };

  return (
    <div className="max-w-3xl mx-auto px-6 -mt-8 relative z-10">
      <div className="bg-white rounded-2xl shadow-xl p-4">
        <Input
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          onKeyPress={handleSearch}
          placeholder={t('landing.search.placeholder')}
          icon={<Search className="w-4 h-4 text-gray-400" />}
          className="text-lg"
          dir={direction}
        />
      </div>
    </div>
  );
}

================
File: src\features\landing\components\StatsSection.tsx
================
// src/features/landing/components/StatsSection.tsx
import { useEffect, useRef, useState } from 'react';
import { useLanguage } from "@/hooks/useLanguage";
import { Card } from "@/components/ui/card";
import { CountUp } from '@/components/ui/counter';

interface StatsItem {
  value: number;
  label: string;
  suffix?: string;
}

export function StatsSection() {
  const { t } = useLanguage();
  const [isVisible, setIsVisible] = useState(false);
  const sectionRef = useRef<HTMLDivElement>(null);

  const stats: StatsItem[] = [
    { value: 1000, label: t('landing.stats.articles'), suffix: '+' },
    { value: 5000, label: t('landing.stats.users'), suffix: '+' },
    { value: 99, label: t('landing.stats.accuracy'), suffix: '%' },
  ];

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting) {
          setIsVisible(true);
        }
      },
      { threshold: 0.1 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => observer.disconnect();
  }, []);

  return (
    <div ref={sectionRef} className="bg-gray-50 py-24">
      <div className="max-w-7xl mx-auto px-6">
        <div className="grid md:grid-cols-3 gap-8">
          {stats.map((stat, index) => (
            <Card 
              key={index}
              className="p-6 text-center bg-white border border-gray-200 rounded-xl hover:shadow-lg transition-shadow"
            >
              <div className="text-4xl font-bold text-primary-600 mb-2">
                {isVisible ? (
                  <CountUp 
                    end={stat.value} 
                    suffix={stat.suffix}
                  />
                ) : '0'}
              </div>
              <div className="text-gray-600">{stat.label}</div>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: src\features\library\components\BreadcrumbNav.tsx
================
// src/features/library/components/BreadcrumbNav.tsx
import { ChevronLeft, ChevronRight } from "lucide-react";
import { useLanguage } from "@/hooks/useLanguage";
import React from "react";

interface BreadcrumbItem {
  id: string;
  name: string;
}

interface BreadcrumbNavProps {
  items: BreadcrumbItem[];
  onNavigate: (index: number) => void;
}

export function BreadcrumbNav({ items, onNavigate }: BreadcrumbNavProps) {
  const { direction } = useLanguage();
  const ChevronIcon = direction === 'rtl' ? ChevronLeft : ChevronRight;

  return (
    <div className="flex items-center gap-2 text-gray-400 overflow-x-auto">
      {items.map((crumb, index) => (
        <React.Fragment key={crumb.id}>
          {index > 0 && <ChevronIcon size={16} />}
          <button
            onClick={() => onNavigate(index)}
            className="hover:text-white transition-colors whitespace-nowrap"
          >
            {crumb.name}
          </button>
        </React.Fragment>
      ))}
    </div>
  );
}

================
File: src\features\library\components\FileList.tsx
================
// src/features/library/components/FileList.tsx
import { Folder, File, Download, Eye } from "lucide-react";
import { useLanguage } from "@/hooks/useLanguage";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FileOrFolder } from "@/types";

interface FileListProps {
  items: FileOrFolder[];
  onFolderClick: (folder: FileOrFolder) => void;
  onFileDownload: (file: FileOrFolder) => void;
  onFileView: (file: FileOrFolder) => void;
  downloadingFiles: Set<string>;
  viewingFiles: Set<string>;
}

export function FileList({
  items,
  onFolderClick,
  onFileDownload,
  onFileView,
  downloadingFiles,
  viewingFiles,
}: FileListProps) {
  const { t } = useLanguage();
  
  console.log('FileList items:', items); // Debug log

  const isFolder = (item: FileOrFolder) =>
    item.mimeType === 'application/vnd.google-apps.folder';

  if (!items || items.length === 0) {
    return (
      <div className="text-center py-12 text-gray-400">
        {t('library.noResults')}
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {items.map((item) => {
        console.log('Rendering item:', item); // Debug log
        return (
          <Card key={item.id} className="p-6 bg-slate-800/50 hover:bg-slate-700/50 transition-colors">
            <div className="flex items-start justify-between">
              <div className="flex items-center gap-3">
                {isFolder(item) ? (
                  <Folder className="flex-shrink-0 text-yellow-400" size={24} />
                ) : (
                  <File className="flex-shrink-0 text-blue-400" size={24} />
                )}
                <div>
                  <h3 className="text-lg font-medium text-white">
                    {item.name}
                  </h3>
                  <p className="text-sm text-gray-400">
                    {new Date(item.modifiedTime).toLocaleDateString()}
                  </p>
                </div>
              </div>

              <div className="flex gap-2">
                {isFolder(item) ? (
                  <Button
                    variant="secondary"
                    onClick={() => onFolderClick(item)}
                  >
                    {t('library.openButton')}
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="secondary"
                      onClick={() => onFileDownload(item)}
                      disabled={downloadingFiles.has(item.id)}
                    >
                      {downloadingFiles.has(item.id) ? (
                        <span>{t('library.downloading')}</span>
                      ) : (
                        <span>{t('library.downloadButton')}</span>
                      )}
                    </Button>

                    <Button
                      variant="outline"
                      onClick={() => onFileView(item)}
                      disabled={viewingFiles.has(item.id)}
                    >
                      {viewingFiles.has(item.id) ? (
                        <span>{t('library.loading')}</span>
                      ) : (
                        <span>{t('library.openButton')}</span>
                      )}
                    </Button>
                  </>
                )}
              </div>
            </div>
          </Card>
        );
      })}
    </div>
  );
}

================
File: src\features\library\components\SearchToolbar.tsx
================
// src/features/library/components/SearchToolbar.tsx
import { Search } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { useLanguage } from "@/hooks/useLanguage";

interface SearchToolbarProps {
  query: string;
  onQueryChange: (query: string) => void;
  isDeepSearch: boolean;
  onDeepSearchChange: (checked: boolean) => void;
  onSearch: () => void;
}

export function SearchToolbar({
  query,
  onQueryChange,
  isDeepSearch,
  onDeepSearchChange,
  onSearch,
}: SearchToolbarProps) {
  const { t, direction } = useLanguage();

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      onSearch();
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex gap-2">
        <Input
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder={t('library.searchPlaceholder')}
          icon={<Search className="w-4 h-4" />}
          dir={direction}
        />
      </div>

      <div className="flex items-center gap-2">
        <Checkbox
          id="deepSearch"
          checked={isDeepSearch}
          onCheckedChange={onDeepSearchChange}
        />
        <Label htmlFor="deepSearch" className="text-sm text-gray-300">
          {t('library.deepSearch')}
        </Label>
      </div>
    </div>
  );
}

================
File: src\features\search\components\SearchBar.tsx
================
// src/features/search/components/SearchBar.tsx
import { Search } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useLanguage } from "@/hooks/useLanguage";

interface SearchBarProps {
  query: string;
  onQueryChange: (query: string) => void;
  onSearch: () => void;
  isLoading?: boolean;
}

export function SearchBar({
  query,
  onQueryChange,
  onSearch,
  isLoading = false
}: SearchBarProps) {
  const { t, direction } = useLanguage();

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      onSearch();
    }
  };

  return (
    <div className="flex gap-2 w-full">
      <div className="flex-1">
        <Input
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder={t('search.placeholder')}
          icon={<Search className="h-4 w-4 text-gray-400" />}
          disabled={isLoading}
          dir={direction}
        />
      </div>
      <Button
        onClick={onSearch}
        disabled={isLoading}
        className="min-w-[100px]"
      >
        {isLoading ? t('common.loading') : t('common.search')}
      </Button>
    </div>
  );
}

================
File: src\features\search\components\SearchFilters.tsx
================
// src/features/search/components/SearchFilters.tsx
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { useLanguage } from "@/hooks/useLanguage";
import { ResourceType } from "@/types";

interface SearchFiltersProps {
  selectedType?: ResourceType;
  onTypeChange: (type: ResourceType) => void;
}

export function SearchFilters({
  selectedType,
  onTypeChange,
}: SearchFiltersProps) {
  const { t } = useLanguage();

  return (
    <div className="space-y-4">
      <div>
        <h3 className="text-sm font-medium mb-3">
          {t('search.filterByType')}
        </h3>
        <RadioGroup
          value={selectedType}
          onValueChange={(value) => onTypeChange(value as ResourceType)}
        >
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="Both" id="both" />
              <Label htmlFor="both">{t('search.types.both')}</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="System" id="system" />
              <Label htmlFor="system">{t('search.types.system')}</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="Regulation" id="regulation" />
              <Label htmlFor="regulation">{t('search.types.regulation')}</Label>
            </div>
          </div>
        </RadioGroup>
      </div>
    </div>
  );
}

================
File: src\features\search\components\SearchResults.tsx
================
// src/features/search/components/SearchResults.tsx
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useLanguage } from "@/hooks/useLanguage";
import type { SearchResource } from "@/types";

interface SearchResultsProps {
  results: SearchResource[];
  searchQuery: string;
}

export function SearchResults({ results, searchQuery }: SearchResultsProps) {
  const { t, direction } = useLanguage();

  const highlightText = (text: string, query: string) => {
    if (!query.trim()) return text;
    
    const parts = text.split(new RegExp(`(${query})`, 'gi'));
    return (
      <>
        {parts.map((part, i) => (
          part.toLowerCase() === query.toLowerCase() ? (
            <mark key={i} className="bg-yellow-200 rounded px-1">{part}</mark>
          ) : part
        ))}
      </>
    );
  };

  return (
    <div className="space-y-6">
      {results.map((resource) => (
        <Card key={resource.number}>
          <CardHeader>
            <div className="flex items-start justify-between">
              <div>
                <CardTitle>
                  {t('search.article')} {resource.number}
                </CardTitle>
                <CardDescription>
                  {t('search.chapter')} {resource.chapter.number}: {resource.chapter.name}
                  <br />
                  {t('search.section')} {resource.section.number}: {resource.section.name}
                </CardDescription>
              </div>
              <Badge variant="secondary">
                {resource.type}
              </Badge>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h4 className="font-medium mb-2">{t('search.content')}</h4>
              <p className="text-gray-600 whitespace-pre-wrap">
                {highlightText(resource.content, searchQuery)}
              </p>
            </div>
            
            <div>
              <h4 className="font-medium mb-2">{t('search.summary')}</h4>
              <p className="text-gray-600">
                {highlightText(resource.summary, searchQuery)}
              </p>
            </div>
            
            {resource.keywords.length > 0 && (
              <div>
                <h4 className="font-medium mb-2">{t('search.keywords')}</h4>
                <div className="flex flex-wrap gap-2">
                  {resource.keywords.map((keyword) => (
                    <Badge 
                      key={`${resource.number}-keyword-${keyword}`} 
                      variant="outline"
                    >
                      {keyword}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
            
            {resource.references.length > 0 && (
              <div>
                <h4 className="font-medium mb-2">{t('search.references')}</h4>
                <div className="flex flex-wrap gap-2">
                  {resource.references.map((ref) => (
                    <Badge 
                      key={`${resource.number}-ref-${ref}`} 
                      variant="outline"
                    >
                      #{ref}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

================
File: src\features\templates\components\DownloadActions.tsx
================
// src/features/templates/components/DownloadActions.tsx
import { useLanguage } from "@/hooks/useLanguage";
import { Button } from "@/components/ui/button";
import { Download, Mail } from "lucide-react";

interface DownloadActionsProps {
  onDownloadPDF: () => void;
  onDownloadDOCX: () => void;
  onEmail: () => void;
  isDownloading: boolean;
}

export function DownloadActions({
  onDownloadPDF,
  onDownloadDOCX,
  onEmail,
  isDownloading
}: DownloadActionsProps) {
  const { t } = useLanguage();

  return (
    <div className="flex flex-wrap gap-4">
      <Button
        onClick={onDownloadDOCX}
        disabled={isDownloading}
        variant="outline"
      >
        <Download className="w-4 h-4 mr-2" />
        {t('templates.download.docx')}
      </Button>
      
      <Button
        onClick={onDownloadPDF}
        disabled={isDownloading}
        variant="outline"
      >
        <Download className="w-4 h-4 mr-2" />
        {t('templates.download.pdf')}
      </Button>
      
      <Button onClick={onEmail}>
        <Mail className="w-4 h-4 mr-2" />
        {t('templates.email.button')}
      </Button>
    </div>
  );
}

================
File: src\features\templates\components\EmailDialog.tsx
================
// src/features/templates/components/EmailDialog.tsx
import { useState } from "react";
import { useLanguage } from "@/hooks/useLanguage";
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle 
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import LoadingSpinner from "@/components/ui/loading-spinner";

interface EmailDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSend: (data: {
    recipient_email: string;
    subject: string;
    body: string;
    doc_path: string;
  }) => void;
  docPath: string;
  isLoading: boolean;
}

export function EmailDialog({ 
  isOpen, 
  onClose, 
  onSend, 
  docPath, 
  isLoading 
}: EmailDialogProps) {
  const { t, direction } = useLanguage();
  const [formData, setFormData] = useState({
    recipient_email: '',
    subject: '',
    body: ''
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSend({
      ...formData,
      doc_path: docPath
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{t('templates.email.title')}</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Input
              type="email"
              placeholder={t('templates.email.recipient')}
              value={formData.recipient_email}
              onChange={(e) => setFormData(prev => ({
                ...prev,
                recipient_email: e.target.value
              }))}
              required
              dir={direction}
            />
          </div>
          
          <div className="space-y-2">
            <Input
              placeholder={t('templates.email.subject')}
              value={formData.subject}
              onChange={(e) => setFormData(prev => ({
                ...prev,
                subject: e.target.value
              }))}
              required
              dir={direction}
            />
          </div>
          
          <div className="space-y-2">
            <Textarea
              placeholder={t('templates.email.body')}
              value={formData.body}
              onChange={(e) => setFormData(prev => ({
                ...prev,
                body: e.target.value
              }))}
              required
              dir={direction}
            />
          </div>

          <Button 
            type="submit" 
            disabled={isLoading}
            className="w-full"
          >
            {isLoading ? (
              <div className="flex items-center gap-2">
                <LoadingSpinner size="sm" />
                {t('common.loading')}
              </div>
            ) : (
              t('templates.email.send')
            )}
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
}

================
File: src\features\templates\components\TemplateCard.tsx
================
// src/features/templates/components/TemplateCard.tsx
import { Card, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { useLanguage } from "@/hooks/useLanguage";
import { Template } from "@/hooks/api/useTemplates";

interface TemplateCardProps {
  template: Template;
  onSelect: (template: Template) => void;
}

export function TemplateCard({ template, onSelect }: TemplateCardProps) {
  const { t } = useLanguage();
  
  return (
    <Card 
      className="hover:shadow-lg transition-shadow cursor-pointer"
      onClick={() => onSelect(template)}
    >
      <CardHeader>
        <CardTitle>{template.display_name}</CardTitle>
        <CardDescription>
          {t('templates.fields')}: {template.placeholders.length}
        </CardDescription>
      </CardHeader>
    </Card>
  );
}

================
File: src\features\templates\components\TemplateForm.tsx
================
// src/features/templates/components/TemplateForm.tsx
import { useState } from "react";
import { useLanguage } from "@/hooks/useLanguage";
import { Template } from "@/hooks/api/useTemplates";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import LoadingSpinner from "@/components/ui/loading-spinner";

interface TemplateFormProps {
  template: Template;
  onSubmit: (values: Record<string, string>) => void;
  isLoading: boolean;
}

export function TemplateForm({ template, onSubmit, isLoading }: TemplateFormProps) {
  const { t, direction } = useLanguage();
  const [values, setValues] = useState<Record<string, string>>({});

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(values);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {template.placeholders.map((placeholder) => (
        <div key={placeholder} className="space-y-2">
          <Label>{placeholder}</Label>
          <Input
            value={values[placeholder] || ''}
            onChange={(e) => setValues(prev => ({
              ...prev,
              [placeholder]: e.target.value
            }))}
            required
            dir={direction}
          />
        </div>
      ))}
      <Button 
        type="submit" 
        disabled={isLoading}
        className="w-full"
      >
        {isLoading ? (
          <div className="flex items-center gap-2">
            <LoadingSpinner size="sm" />
            {t('common.loading')}
          </div>
        ) : (
          t('templates.generate')
        )}
      </Button>
    </form>
  );
}

================
File: src\hooks\useBreakpoint.ts
================
// src/hooks/useBreakpoint.ts
import { useState, useEffect } from 'react';
import { breakpoints, Breakpoint } from '../config/responsive';

export function useBreakpoint() {
  const [breakpoint, setBreakpoint] = useState<Breakpoint>('xs');
  const [width, setWidth] = useState(0);

  useEffect(() => {
    const handleResize = () => {
      const width = window.innerWidth;
      setWidth(width);

      if (width >= breakpoints['2xl']) setBreakpoint('2xl');
      else if (width >= breakpoints.xl) setBreakpoint('xl');
      else if (width >= breakpoints.lg) setBreakpoint('lg');
      else if (width >= breakpoints.md) setBreakpoint('md');
      else if (width >= breakpoints.sm) setBreakpoint('sm');
      else setBreakpoint('xs');
    };

    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return {
    breakpoint,
    width,
    isMobile: width < breakpoints.md,
    isTablet: width >= breakpoints.md && width < breakpoints.lg,
    isDesktop: width >= breakpoints.lg,
  };
}

================
File: src\hooks\useLanguage.ts
================
// src/hooks/useLanguage.ts
import { useContext } from 'react';
import { LanguageContext } from '@/providers/LanguageProvider';

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }

  const { language, direction, setLanguage } = context;

  function t(key: string, params?: Record<string, string>, raw = false): string | any {
    const keys = key.split('.');
    let value: any = context?.translations[language];

    for (const k of keys) {
      if (value === undefined) return key;
      value = value[k];
    }

    if (raw) return value;

    if (typeof value === 'string' && params) {
      return value.replace(/\{(\w+)\}/g, (_, key) => params[key] || `{${key}}`);
    }

    return value?.toString() || key;
  }

  return { language, direction, setLanguage, t };
}

================
File: src\hooks\useToast.ts
================
// src/hooks/useToast.ts
import { toast, ToastOptions } from 'react-toastify';
import { useLanguage } from './useLanguage';

export function useToast() {
  const { direction } = useLanguage();

  const defaultOptions: ToastOptions = {
    position: direction === 'rtl' ? 'top-left' : 'top-right',
    autoClose: 3000,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
  };

  const showToast = (message: string, type: 'success' | 'error' | 'info' | 'warning' = 'info') => {
    toast[type](message, defaultOptions);
  };

  return { showToast };
}

================
File: src\hooks\api\useAdmin.ts
================
// src/hooks/api/useAdmin.ts
import { useState } from 'react';
import { api } from '@/lib/axios';
import { Contact, Credentials } from '@/types/admin';

export function useAdmin() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [contacts, setContacts] = useState<Contact[]>([]);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // Set up auth header for the request
  const getAuthHeader = (credentials: Credentials) => ({
    'Authorization': `Basic ${btoa(`${credentials.username}:${credentials.password}`)}`
  });

  const fetchContacts = async (credentials: Credentials) => {
    try {
      setIsLoading(true);
      const response = await api.get('/admin/contacts', {
        headers: getAuthHeader(credentials)
      });

      if (response.status === 401) {
        throw new Error('Unauthorized access');
      }

      setContacts(response.data);
      setIsAuthenticated(true);
      return { success: true };
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      setError(errorMessage);
      setIsAuthenticated(false);
      return { success: false, error: errorMessage };
    } finally {
      setIsLoading(false);
    }
  };

  // Submit contact form (no auth required)
  const submitContact = async (contactData: Omit<Contact, 'Date'>) => {
    try {
      const response = await api.post('/admin/contact', contactData);
      return response.data;
    } catch (err) {
      throw new Error(err instanceof Error ? err.message : 'Failed to submit contact form');
    }
  };

  const exportToCSV = () => {
    if (contacts.length === 0) return;

    const headers = Object.keys(contacts[0]).join(',');
    const rows = contacts.map(contact =>
      Object.values(contact)
        .map(value => `"${value}"`)
        .join(',')
    );
    const csvContent = [headers, ...rows].join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `contacts_${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const logout = () => {
    setIsAuthenticated(false);
    setContacts([]);
    setError(null);
  };

  return {
    contacts,
    isLoading,
    error,
    isAuthenticated,
    fetchContacts,
    submitContact,
    exportToCSV,
    logout
  };
}

================
File: src\hooks\api\useChat.ts
================
// src/hooks/api/useChat.ts
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { api } from '@/lib/axios';
import { ChatMessage, ChatResponse, HistoryResponse, ChatOptions } from '@/types/chat';

export function useChat() {
  const queryClient = useQueryClient();

  const sendMessage = useMutation<
    ChatResponse,
    Error,
    { message: string; options: ChatOptions }
  >({
    mutationFn: async ({ message, options }) => {
      const response = await api.post<ChatResponse>('/chat', {
        message,
        language: options.saudiAccent ? 'sa' : undefined,
        reasoning: options.reasoning,
        sessionId: localStorage.getItem('sessionId') || 'default'
      });
      
      console.log('API Response:', response.data); // Debug log
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['chatHistory'] });
    }
  });

  const chatHistory = useQuery<ChatMessage[]>({
    queryKey: ['chatHistory'],
    queryFn: async () => {
      const sessionId = localStorage.getItem('sessionId') || 'default';
      const response = await api.get<HistoryResponse>(`/chat/history?sessionId=${sessionId}`);
      return response.data.messages;
    }
  });

  const clearHistory = useMutation({
    mutationFn: async () => {
      const sessionId = localStorage.getItem('sessionId') || 'default';
      await api.delete(`/chat/history?sessionId=${sessionId}`);
    },
    onSuccess: () => {
      // Fixed: Use proper invalidation syntax
      queryClient.invalidateQueries({ queryKey: ['chatHistory'] });
    }
  });

  // Initialize or get session ID
  const initializeSession = () => {
    if (!localStorage.getItem('sessionId')) {
      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      localStorage.setItem('sessionId', sessionId);
    }
  };

  return {
    sendMessage,
    chatHistory,
    clearHistory,
    initializeSession
  };
}

================
File: src\hooks\api\useCorrection.ts
================
// src/hooks/api/useCorrection.ts
import { useMutation } from '@tanstack/react-query';
import { api } from '@/lib/axios';
import { CorrectionRequest, CorrectionResponse } from '@/types/correction';

export function useCorrection() {
  return useMutation<CorrectionResponse, Error, CorrectionRequest>({
    mutationFn: async ({ text, language }) => {
      const response = await api.post('/correction', {
        text,
        language,
      });
      return response.data;
    },
  });
}

================
File: src\hooks\api\useLibrary.ts
================
// src/hooks/api/useLibrary.ts
import { useQuery, useMutation } from '@tanstack/react-query';
import { api } from '@/lib/axios';
import { FileOrFolder } from '@/types';

interface ViewFileResponse {
  content: string;
  mimeType: string;
}

// List folder contents
export function useLibrary(folderId: string) {
  return useQuery({
    queryKey: ['library', folderId],
    queryFn: async () => {
      const response = await api.get(`/library/list-folder-contents`, {
        params: { folder_id: folderId }
      });
      return response.data as FileOrFolder[];
    },
  });
}

// Search files
export function useLibrarySearch(query: string, recursive: boolean) {
  return useQuery({
    queryKey: ['library', 'search', query, recursive],
    queryFn: async () => {
      const response = await api.get(`/library/search-files`, {
        params: { query, recursive }
      });
      return response.data as FileOrFolder[];
    },
    enabled: !!query,
  });
}

// Download file
export function useFileDownload() {
  return useMutation({
    mutationFn: async (fileId: string) => {
      const response = await api.post('/library/download-file', 
        { file_id: fileId },
        { responseType: 'blob' }
      );
      return response.data;
    },
  });
}

// View file
export function useFileView() {
  return useMutation({
    mutationFn: async (fileId: string) => {
      const response = await api.post<ViewFileResponse>('/library/view-file', {
        file_id: fileId
      });
      return response.data;
    },
  });
}

// Helper function to convert base64 to blob
export function base64ToBlob(base64Content: string, mimeType: string): Blob {
  const binaryContent = atob(base64Content);
  const bytes = new Uint8Array(binaryContent.length);
  
  for (let i = 0; i < binaryContent.length; i++) {
    bytes[i] = binaryContent.charCodeAt(i);
  }
  
  return new Blob([bytes], { type: mimeType });
}

// Helper function to open file in new tab
export function openFileInNewTab(blob: Blob): void {
  const blobUrl = URL.createObjectURL(blob);
  const viewerWindow = window.open(blobUrl, '_blank');
  
  if (viewerWindow) {
    viewerWindow.onload = () => {
      URL.revokeObjectURL(blobUrl);
    };
  }
}

// Helper function for handling file downloads
export function downloadFile(blob: Blob, fileName: string) {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = fileName;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

================
File: src\hooks\api\useSearch.ts
================
// src/hooks/api/useSearch.ts
import { useQuery } from '@tanstack/react-query';
import { api } from '@/lib/axios';
import { ResourceType, SearchResource } from '@/types';

export function useSearch(query: string, type?: ResourceType) {
  return useQuery({
    queryKey: ['search', query, type],
    queryFn: async () => {
      const response = await api.get('/search', {
        params: {
          query: query.trim(),
          type: type !== 'Both' ? type : undefined
        }
      });
      return response.data;
    },
    enabled: false,
  });
}

================
File: src\hooks\api\useTemplates.ts
================
// src/hooks/api/useTemplates.ts
import { useMutation, useQuery } from '@tanstack/react-query';
import { api } from '@/lib/axios';

export interface Template {
  filename: string;
  placeholders: string[];
  display_name: string;
}

interface GenerateDocResponse {
  message: string;
  doc_path: string;
}

interface SendEmailData {
  recipient_email: string;
  subject: string;
  body: string;
  doc_path: string;
}

export function useTemplates() {
  // Get all templates
  const getAllTemplates = useQuery({
    queryKey: ['templates'],
    queryFn: async () => {
      const response = await api.get<{ templates: Template[] }>('/templates');
      return response.data.templates;
    }
  });

  // Get template details
  const getTemplateDetails = (templateName: string) => 
    useQuery({
      queryKey: ['template-details', templateName],
      queryFn: async () => {
        const response = await api.get<Template>(`/templates/${templateName}`);
        return response.data;
      },
      enabled: !!templateName
    });

  // Generate document
  const generateDocument = useMutation<
    GenerateDocResponse,
    Error,
    { templateName: string; values: Record<string, string> }
  >({
    mutationFn: async ({ templateName, values }) => {
      const response = await api.post(`/templates/${templateName}/generate`, values);
      return response.data;
    }
  });

  // Download document
  const downloadDocument = useMutation<
    void,
    Error,
    { docPath: string; format: 'pdf' | 'docx' }
  >({
    mutationFn: async ({ docPath, format }) => {
      const response = await api.post(
        `/templates/download/${format}`,
        { doc_path: docPath },
        { responseType: 'blob' }
      );
      
      // Create download link
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `document.${format}`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
    }
  });

  // Send email
  const sendEmail = useMutation<void, Error, SendEmailData>({
    mutationFn: async (data) => {
      await api.post('/templates/send-email', data);
    }
  });

  return {
    getAllTemplates,
    getTemplateDetails,
    generateDocument,
    downloadDocument,
    sendEmail
  };
}

================
File: src\lib\axios.ts
================
// src/lib/axios.ts
import axios from 'axios';

export const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:8080/api',
  headers: {
    'Content-Type': 'application/json',
  },
});

api.interceptors.request.use((config) => {
  // Add auth token if needed
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

api.interceptors.response.use(
  (response) => response,
  (error) => {
    // Handle global errors (401, 403, etc.)
    if (error.response?.status === 401) {
      // Handle unauthorized
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

================
File: src\lib\calculator.ts
================
import { DateTime, Duration, Info } from 'luxon';
import { tafqit } from './tafqit';
import {toWords   } from 'number-to-words';

// VAT Calculator as a separate class
export class VATCalculator {
  static readonly defaultVAT = 15; // Default VAT rate in Saudi Arabia

  static calculateTotalWithVAT(totalAmount: number, vatRate: number = VATCalculator.defaultVAT): {
    netAmount: number;
    vatAmount: number;
    totalAmount: number;
  } {
    const netAmount = totalAmount / (1 + (vatRate / 100));
    const vatAmount = totalAmount - netAmount;
    return {
      netAmount: netAmount,
      vatAmount: vatAmount,
      totalAmount: totalAmount
    };
  }

  static extractAmountFromVAT(vatAmount: number, vatRate: number = VATCalculator.defaultVAT): {
    originalAmount: number;
    totalAmount: number;
  } {
    const originalAmount = (vatAmount * 100) / vatRate;
    return {
      originalAmount,
      totalAmount: originalAmount
    };
  }

  static calculateVATAmount(totalAmount: number, vatRate: number = VATCalculator.defaultVAT): {
    vatAmount: number;
    netAmount: number;
  } {
    const vatAmount = (totalAmount * vatRate) / (100 + vatRate);
    return {
      vatAmount,
      netAmount: totalAmount - vatAmount
    };
  }
}

// Date Converter as a separate class
export class DateConverter {
  // Convert Gregorian to Hijri
  static gregorianToHijri(date: Date): string {
    const luxonDate = DateTime.fromJSDate(date)
      .reconfigure({ outputCalendar: 'islamic' });
    
    // Get the formatted date
    const formatted = luxonDate.toLocaleString({
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
    });

    // Convert to YYYY/MM/DD format
    const [month, day, year] = formatted.split('/');
    return `${year}/${month}/${day}`;
  }

  // Convert Hijri to Gregorian
  static hijriToGregorian(hijriDateStr: string): Date {
    // Since Luxon doesn't support direct Islamic calendar calculations,
    // we'll need to use a different approach.
    // This is a simplified conversion that might need adjustment
    const [yearStr, monthStr, dayStr] = hijriDateStr.split('/');
    const year = parseInt(yearStr);
    const month = parseInt(monthStr);
    const day = parseInt(dayStr);

    // Approximate conversion formula
    const hijriYear = year;
    const hijriMonth = month;
    const hijriDay = day;

    // Rough approximation: Hijri year × 354.367068 days per Hijri year
    const epochDays = Math.floor(
      (hijriYear - 1) * 354.367068 +
      (hijriMonth - 1) * 29.5 +
      hijriDay
    );

    // Approximate Gregorian date (base date: July 19, 622 CE)
    const gregorianDate = new Date(622, 6, 19);
    gregorianDate.setDate(gregorianDate.getDate() + epochDays);

    return gregorianDate;
  }

  // Calculate difference between dates
  static calculateDateDifference(startDate: Date, endDate: Date): {
    days: number;
    months: number;
    years: number;
  } {
    const start = DateTime.fromJSDate(startDate);
    const end = DateTime.fromJSDate(endDate);
    const diff = end.diff(start, ['years', 'months', 'days']);

    return {
      years: Math.floor(diff.years),
      months: Math.floor(diff.months),
      days: Math.floor(diff.days)
    };
  }

  // Calculate end date by adding duration
  static calculateEndDate(
    startDate: Date, 
    duration: { days?: number; months?: number; years?: number; }
  ): Date {
    const dt = DateTime.fromJSDate(startDate, { zone: 'local' })
      .plus({
        years: duration.years || 0,
        months: duration.months || 0,
        days: duration.days || 0,
      });
    
    // If the original startDate was at midnight, ensure the result is too.
    const finalDateTime = (startDate.getHours() === 0 &&
                           startDate.getMinutes() === 0 &&
                           startDate.getSeconds() === 0)
                           ? dt.startOf('day')
                           : dt;
  
    return finalDateTime.toJSDate();
  }
  

  // Helper method to validate Hijri date
  static isValidHijriDate(dateStr: string): boolean {
    try {
      const [year, month, day] = dateStr.split('/').map(Number);
      
      // Basic validation
      if (
        year < 1 || year > 9999 ||
        month < 1 || month > 12 ||
        day < 1 || day > 30  // Hijri months have 29 or 30 days
      ) {
        return false;
      }

      return true;
    } catch {
      return false;
    }
  }

  // Get current Hijri date
  static getCurrentHijriDate(): string {
    return DateTime.now()
      .reconfigure({ outputCalendar: 'islamic' })
      .toLocaleString({
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      });
  }

  // Get Hijri month name
  static getHijriMonthName(month: number): string {
    const months = [
      "محرم", "صفر", "ربيع الأول", "ربيع الثاني",
      "جمادى الأولى", "جمادى الآخرة", "رجب", "شعبان",
      "رمضان", "شوال", "ذو القعدة", "ذو الحجة"
    ];
    return months[month - 1] || '';
  }

  // Format Gregorian date to display
  static formatGregorianDate(date: Date): string {
    return DateTime.fromJSDate(date).toFormat('yyyy-MM-dd');
  }

  // Get a more detailed Hijri date string including month name
  static getDetailedHijriDate(date: Date): string {
    const luxonDate = DateTime.fromJSDate(date)
      .reconfigure({ outputCalendar: 'islamic' });
    
    return luxonDate.toLocaleString({
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      calendar: 'islamic'
    });
  }

  static HijricalculateDateDifference(startDateStr: string, endDateStr: string): {
    days: number;
    months: number;
    years: number;
  } {
    // Validate input dates
    if (!this.isValidHijriDate(startDateStr) || !this.isValidHijriDate(endDateStr)) {
      throw new Error('Invalid Hijri date format. Use YYYY/MM/DD');
    }

    // Convert Hijri dates to DateTime objects with Islamic calendar
    const [startYear, startMonth, startDay] = startDateStr.split('/').map(Number);
    const [endYear, endMonth, endDay] = endDateStr.split('/').map(Number);

    const start = DateTime.local()
      .reconfigure({ outputCalendar: 'islamic' })
      .set({ year: startYear, month: startMonth, day: startDay });

    const end = DateTime.local()
      .reconfigure({ outputCalendar: 'islamic' })
      .set({ year: endYear, month: endMonth, day: endDay });

    // Calculate difference
    const diff = end.diff(start, ['years', 'months', 'days']);

    return {
      years: Math.floor(diff.years),
      months: Math.floor(diff.months),
      days: Math.floor(diff.days)
    };
  }

  // Calculate end date by adding duration in Hijri calendar
  static HijricalculateEndDate(
    startDateStr: string,
    duration: { days?: number; months?: number; years?: number; }
  ): string {
    // Validate input date
    if (!this.isValidHijriDate(startDateStr)) {
      throw new Error('Invalid Hijri date format. Use YYYY/MM/DD');
    }

    // Parse the start date
    const [year, month, day] = startDateStr.split('/').map(Number);

    // Create DateTime object with Islamic calendar
    let dt = DateTime.local()
      .reconfigure({ outputCalendar: 'islamic' })
      .set({ year, month, day });

    // Add duration
    dt = dt.plus({
      years: duration.years || 0,
      months: duration.months || 0,
      days: duration.days || 0,
    });

    // Format the result back to YYYY/MM/DD
    const result = dt.toLocaleString({
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });

    // Convert from MM/DD/YYYY to YYYY/MM/DD format
    const [resultMonth, resultDay, resultYear] = result.split('/');
    return `${resultYear}/${resultMonth}/${resultDay}`;
  }
}

// Main Calculator class
export class ProcurementCalculator {
  static calculatePercentageChange(baseAmount: number, newAmount: number): number {
    return ((newAmount - baseAmount) / baseAmount) * 100;
  }

  static calculateAmountWithPercentage(amount: number, percentage: number): {
    originalAmount: number;
    adjustmentAmount: number;
    finalAmount: number;
  } {
    const adjustmentAmount = (amount * percentage) / 100;
    return {
      originalAmount: amount,
      adjustmentAmount,
      finalAmount: amount + adjustmentAmount
    };
  }

  /**
   * Convert number to Arabic words with optional configuration
   * @param amount The number to convert
   * @param options Configuration options for the conversion
   * @returns The number in Arabic words
   */
  static numberToWords(amount: number, options: {
    language?: 'ar' | 'en';
    feminine?: 'on';
    comma?: 'on';
    miah?: 'on';
    legal?: 'on';
  } = {}): string {
    if (options.language === 'en') {
      // Simple English implementation remains for backward compatibility
      const englishNumbers = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];
      return toWords(amount);
    }

    // Use the tafqit function for Arabic
    return tafqit(amount, {
      Feminine: options.feminine,
      Comma: options.comma,
      Miah: options.miah,
      Legal: options.legal
    });
  }
}

// Re-export all calculators
export default {
  ProcurementCalculator,
  VATCalculator,
  DateConverter
};

================
File: src\lib\Client.ts
================
// src/lib/queryClient.ts
import { QueryClient } from '@tanstack/react-query';

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      refetchOnWindowFocus: false,
      retry: 1,
    },
  },
});

================
File: src\lib\tafqit.ts
================
// Types for tafqit options
interface TafqitOptions {
    Feminine?: 'on';
    Comma?: 'on';
    SplitHund?: 'on';
    Miah?: 'on';
    Billions?: 'on';
    TextToFollow?: 'on';
    AG?: 'on';
    Subject?: [string, string, string, string];
    Legal?: 'on';
  }
  
  // Constants
  const TableScales = ["","ألف","مليون","مليار","ترليون","كوادرليون","كوينتليون","سكستليون"];
  const TableScalesP = ["","آلاف","ملايين","مليارات"];
  const TableMale = ["","واحد","اثنان","ثلاثة","أربعة","خمسة","ستة","سبعة","ثمانية","تسعة","عشرة"];
  const TableFemale = ["","واحدة","اثنتان","ثلاث","أربع","خمس","ست","سبع","ثمان","تسع","عشر"];
  
  export function tafqit(NumIn: number | string = 0, options: TafqitOptions = {}): string {
    const {
      Feminine,
      Comma,
      SplitHund,
      Miah,
      Billions,
      TextToFollow,
      AG,
      Subject,
      Legal
    } = options;
  
    if (NumIn == 0) return "صفر";
  
    // Initialize variables before use
    let Triplet = 0;
    let Scale = "";
    let ScalePos = 0;
    let ScalePlural = "";
    let TableUnits = [...TableMale];
    let Table11_19 = [...TableMale];
    let NumberInWords = "";
    let IsLastEffTriplet = false;
    let Num_99 = 0;
  
    const ON = "on";
    const IsAG = (AG === ON);
    const SpWa = " و";
    const TanweenLetter = "ًا";
    const Ahad = "أحد";
    const Ehda = "إحدى";
    
    const Taa = IsAG ? "تي" : "تا";
    const Taan = IsAG ? "تين" : "تان";
    const Aa = IsAG ? "ي" : "ا";
    const Aan = IsAG ? "ين" : "ان";
    const Ethna = IsAG ? "اثني" : "اثنا";
    const Ethnata = IsAG ? "اثنتي" : "اثنتا";
    const Ethnan = IsAG ? "اثنين" : "اثنان";
    const Ethnatan = IsAG ? "اثنتين" : "اثنتان";
    const Woon = IsAG ? "ين" : "ون";
    
    const IsSubject = Array.isArray(Subject) && Subject.length === 4;
  
    let isTextToFollow = TextToFollow === ON;
    if (IsSubject) isTextToFollow = true;
  
    let numStr = String(NumIn);
    numStr = String(numStr).replace(/[٠-٩]/g, d => String("٠١٢٣٤٥٦٧٨٩".indexOf(d)));
    const selectedMiah = (Miah === ON) ? "مئة" : "مائة";
  
    // Initialize TableUnits and Table11_19
    Table11_19[0] = TableFemale[10];
    Table11_19[1] = Ahad;
    Table11_19[2] = Ethna;
    TableUnits[2] = Ethnan;
  
    numStr = "0".repeat(numStr.length * 2 % 3) + numStr;
    const NumLen = numStr.length;
  
    function oneTripletToWords(): string {
      Num_99 = Triplet % 100;
      const Num_100 = Math.floor(Triplet/100);
      const Num_Unit = Num_99 % 10;
      const Num_Tens = Math.floor(Num_99/10);
      let Word_100 = "";
      let Word_99 = "";
  
      if (Feminine === ON && !Scale) {
        TableUnits = [...TableFemale];
        Table11_19 = [...TableFemale];
        Table11_19[0] = TableMale[10];
        Table11_19[1] = Ehda;
        Table11_19[2] = Ethnata;
        TableUnits[2] = Ethnatan;
        if (Num_99 > 19) TableUnits[1] = Ehda;
      }
  
      if (Num_100) {
        if (Num_100 > 2) Word_100 = TableFemale[Num_100] + (SplitHund === ON ? " " : "") + selectedMiah;
        else if (Num_100 === 1) Word_100 = selectedMiah;
        else Word_100 = selectedMiah.slice(0,-1) + (Scale && !Num_99 || isTextToFollow ? Taa : Taan);
      }
  
      if (Num_99 > 19) {
        Word_99 = TableUnits[Num_Unit] + (Num_Unit ? SpWa : "") +
                  (Num_Tens === 2 ? "عشر" : TableFemale[Num_Tens]) + Woon;
      } else if (Num_99 > 10) {
        Word_99 = Table11_19[Num_99-10] + " " + Table11_19[0];
      } else if (Num_99 > 2 || !Num_99 || !IsSubject) {
        Word_99 = TableUnits[Num_99];
      }
  
      let Words999 = Word_100 + (Num_100 && Num_99 ? SpWa : "") + Word_99;
  
      if (Scale) {
        const legalTxt = (Legal === ON && Num_99 < 3) ? " " + Scale : "";
        const Word_100Wa = (Num_100 ? Word_100 + legalTxt + SpWa : "") + Scale;
        
        if (Num_99 > 2) {
          Words999 += " " + (Num_99 > 10 
            ? Scale + (IsLastEffTriplet && isTextToFollow ? "" : TanweenLetter)
            : ScalePlural);
        } else {
          if (!Num_99) Words999 += " " + Scale;
          else if (Num_99 === 1) Words999 = Word_100Wa;
          else Words999 = Word_100Wa + (IsLastEffTriplet && isTextToFollow ? Aa : Aan);
        }
      }
      
      return Words999;
    }
  
    for (let digits = NumLen; digits > 0; digits -= 3) {
      Triplet = +numStr.substr(NumLen - digits, 3);
      IsLastEffTriplet = !+numStr.substr(NumLen - digits + 3);
      
      if (Triplet) {
        ScalePos = Math.floor(digits/3) - 1;
        Scale = TableScales[ScalePos];
        ScalePlural = (ScalePos < 4 ? TableScalesP[ScalePos] : TableScales[ScalePos] + "ات");
        
        if (Billions && ScalePos === 3) {
          Scale = "بليون";
          ScalePlural = "بلايين";
        }
        
        NumberInWords += oneTripletToWords();
        if (!IsLastEffTriplet) NumberInWords += (Comma === ON ? "،" : "") + SpWa;
      }
    }
  
    let SubjectName = "";
    if (IsSubject) {
      const space = !IsLastEffTriplet ? "" : " ";
      Triplet = +(String(Triplet)).slice(-2);
      SubjectName = space + Subject[0];
      
      if (Triplet > 10) SubjectName = space + Subject[3];
      else if (Triplet > 2) SubjectName = space + Subject[2];
      else if (Triplet > 0) SubjectName = Subject[Triplet-1] + " " + TableUnits[Num_99];
    }
  
    return NumberInWords + SubjectName;
  }

================
File: src\lib\utils.ts
================
// src/lib/utils.ts
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// Simple debounce function
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout;

  return function executedFunction(...args: Parameters<T>) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };

    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Format date considering RTL/LTR
export function formatDate(date: Date, locale: string) {
  return new Intl.DateTimeFormat(locale, {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date);
}

================
File: src\pages\AdminPage.tsx
================
// src/pages/AdminPage.tsx
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Download } from 'lucide-react';
import { useAdmin } from '@/hooks/api/useAdmin';
import { useLanguage } from '@/hooks/useLanguage';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Credentials } from '@/types/admin';

export default function AdminPage() {
  const { t } = useLanguage();
  const navigate = useNavigate();
  const [credentials, setCredentials] = useState<Credentials>({ 
    username: '', 
    password: '' 
  });

  const {
    contacts,
    isLoading,
    error,
    isAuthenticated,
    fetchContacts,
    exportToCSV,
    logout
  } = useAdmin();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    await fetchContacts(credentials);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      {!isAuthenticated ? (
        <div className="max-w-md w-full mx-auto space-y-8">
          <Card>
            <CardHeader>
              <CardTitle className="text-center">
                {t('admin.login.title')}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleLogin} className="space-y-4">
                <Input
                  type="text"
                  required
                  placeholder={t('admin.login.username')}
                  value={credentials.username}
                  onChange={(e) => setCredentials(prev => ({ 
                    ...prev, 
                    username: e.target.value 
                  }))}
                />
                <Input
                  type="password"
                  required
                  placeholder={t('admin.login.password')}
                  value={credentials.password}
                  onChange={(e) => setCredentials(prev => ({ 
                    ...prev, 
                    password: e.target.value 
                  }))}
                />
                {error && (
                  <div className="text-red-500 text-sm text-center">
                    {error}
                  </div>
                )}
                <Button type="submit" className="w-full">
                  {t('admin.login.submit')}
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      ) : (
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-2xl font-bold text-gray-900">
              {t('admin.contacts.title')}
            </h1>
            <div className="flex gap-4">
              <Button
                onClick={exportToCSV}
                disabled={contacts.length === 0}
                variant="secondary"
                className="flex items-center gap-2"
              >
                <Download className="h-4 w-4" />
                {t('admin.contacts.export')}
              </Button>
              <Button
                onClick={logout}
                variant="danger"
              >
                {t('admin.logout')}
              </Button>
            </div>
          </div>

          {isLoading ? (
            <div className="text-center py-8">
              {t('common.loading')}
            </div>
          ) : (
            <div className="shadow-lg rounded-lg overflow-hidden">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>{t('admin.contacts.date')}</TableHead>
                    <TableHead>{t('admin.contacts.name')}</TableHead>
                    <TableHead>{t('admin.contacts.email')}</TableHead>
                    <TableHead>{t('admin.contacts.message')}</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {contacts.map((contact, index) => (
                    <TableRow key={index}>
                      <TableCell>{contact.Date}</TableCell>
                      <TableCell>{contact.Name}</TableCell>
                      <TableCell>{contact.Email}</TableCell>
                      <TableCell>{contact.Message}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

================
File: src\pages\CalculatorPage.tsx
================
// src/pages/CalculatorPage.tsx
import { useState } from 'react';
import { useLanguage } from '@/hooks/useLanguage';
import { 
  Card, 
  CardHeader, 
  CardTitle, 
  CardContent 
} from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { ProcurementCalculator, VATCalculator, DateConverter } from '@/lib/calculator';
import { DateTime } from 'luxon';
import { 
  PercentageResult, 
  VATResult, 
  AmountWithPercentageResult,
  DateDifference 
} from '@/types/calculator';

export default function CalculatorPage() {
  // Percentage Calculator State
  const [baseAmount, setBaseAmount] = useState('');
  const [newAmount, setNewAmount] = useState('');
  const [percentageResult, setPercentageResult] = useState<string>('');

  // VAT Calculator State
  const [vatAmount, setVatAmount] = useState('');
  const [vatRate, setVatRate] = useState('15');
  const [vatResult, setVatResult] = useState<VATResult>({});
  const [vatOperation, setVatOperation] = useState<'total' | 'extract' | 'amount'>('total');

  // Amount with Percentage State
  const [amount, setAmount] = useState('');
  const [percentage, setPercentage] = useState('');
  const [percentageAmountResult, setPercentageAmountResult] = useState<AmountWithPercentageResult>({});

  // Date Converter State
  const [gregorianDate, setGregorianDate] = useState('');
  const [hijriDate, setHijriDate] = useState('');
  const [gregorianResult, setGregorianResult] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [dateDifference, setDateDifference] = useState<DateDifference>({});
  const [durationDays, setDurationDays] = useState('');
  const [durationMonths, setDurationMonths] = useState('');
  const [durationYears, setDurationYears] = useState('');
  const [calculatedEndDate, setCalculatedEndDate] = useState('');
  const [hijriStartDate, setHijriStartDate] = useState('');
  const [hijriDurationDays, setHijriDurationDays] = useState('');
  const [hijriDurationMonths, setHijriDurationMonths] = useState('');
  const [hijriDurationYears, setHijriDurationYears] = useState('');
  const [calculatedHijriEndDate, setCalculatedHijriEndDate] = useState('');

  // Tafqit State
  const [tafqitAmount, setTafqitAmount] = useState('');
  const [tafqitLanguage, setTafqitLanguage] = useState<'ar' | 'en'>('ar');
  const [tafqitResult, setTafqitResult] = useState('');

  const { t, language } = useLanguage();

  // Calculation Functions
  const calculatePercentageChange = () => {
    if (!baseAmount || !newAmount) return;
    const result = ProcurementCalculator.calculatePercentageChange(
      Number(baseAmount),
      Number(newAmount)
    );
    setPercentageResult(`${result.toFixed(2)}%`);
  };

  const calculateVAT = () => {
    if (!vatAmount) return;
    
    switch (vatOperation) {
      case 'total':
        const totalResult = VATCalculator.calculateTotalWithVAT(
          Number(vatAmount),
          Number(vatRate)
        );
        setVatResult(totalResult);
        break;
      case 'extract':
        const extractResult = VATCalculator.extractAmountFromVAT(
          Number(vatAmount),
          Number(vatRate)
        );
        setVatResult(extractResult);
        break;
      case 'amount':
        const amountResult = VATCalculator.calculateVATAmount(
          Number(vatAmount),
          Number(vatRate)
        );
        setVatResult(amountResult);
        break;
    }
  };

  const calculateAmountWithPercentage = () => {
    if (!amount || !percentage) return;
    const result = ProcurementCalculator.calculateAmountWithPercentage(
      Number(amount),
      Number(percentage)
    );
    setPercentageAmountResult(result);
  };

  // Date Functions
  const convertHijriToGregorian = () => {
    try {
      if (!DateConverter.isValidHijriDate(hijriDate)) {
        return;
      }
      const result = DateConverter.hijriToGregorian(hijriDate);
      setGregorianResult(DateTime.fromJSDate(result).toFormat('yyyy-MM-dd'));
    } catch (error) {
      console.error(error);
    }
  };

  const convertGregorianToHijri = () => {
    try {
      if (!gregorianDate) return;
      const result = DateConverter.gregorianToHijri(new Date(gregorianDate));
      const monthName = DateConverter.getHijriMonthName(parseInt(result.split('/')[1]));
      setHijriDate(`${result} (${monthName})`);
    } catch (error) {
      console.error(error);
    }
  };

  const calculateHijriFutureDate = () => {
    try {
      if (!DateConverter.isValidHijriDate(hijriStartDate)) {
        alert(t('calculator.common.validation.invalidDate'));
        return;
      }
  
      const result = DateConverter.HijricalculateEndDate(
        hijriStartDate,
        {
          days: hijriDurationDays ? parseInt(hijriDurationDays) : 0,
          months: hijriDurationMonths ? parseInt(hijriDurationMonths) : 0,
          years: hijriDurationYears ? parseInt(hijriDurationYears) : 0
        }
      );
  
      const monthName = DateConverter.getHijriMonthName(parseInt(result.split('/')[1]));
      setCalculatedHijriEndDate(`${result} (${monthName})`);
    } catch (error) {
      alert(t('calculator.common.error'));
    }
  };

  
const calculateDateDifference = () => {
    try {
      if (!startDate || !endDate) {
        alert(t('calculator.common.validation.required'));
        return;
      }
  
      const start = new Date(startDate);
      const end = new Date(endDate);
  
      // Validate dates
      if (isNaN(start.getTime()) || isNaN(end.getTime())) {
        alert(t('calculator.common.validation.invalidDate'));
        return;
      }
  
      // Check if end date is after start date
      if (end < start) {
        alert(t('calculator.common.validation.endDateBeforeStart'));
        return;
      }
  
      const result = DateConverter.calculateDateDifference(start, end);
      setDateDifference(result);
    } catch (error) {
      console.error('Date difference calculation error:', error);
      alert(t('calculator.common.error'));
    }
  };
  
  const calculateFutureDate = () => {
    try {
      if (!startDate) {
        alert(t('calculator.common.validation.required'));
        return;
      }
  
      // Parse the input date string as a local date using Luxon
      const start = DateTime.fromFormat(startDate, 'yyyy-MM-dd', { zone: 'local' }).toJSDate();
  
      if (isNaN(start.getTime())) {
        alert(t('calculator.common.validation.invalidDate'));
        return;
      }
  
      // Validate at least one duration field is filled
      if (!durationDays && !durationMonths && !durationYears) {
        alert(t('calculator.date.duration.validation.required'));
        return;
      }
  
      // Calculate end date
      const result = DateConverter.calculateEndDate(
        start,
        {
          days: durationDays ? parseInt(durationDays) : 0,
          months: durationMonths ? parseInt(durationMonths) : 0,
          years: durationYears ? parseInt(durationYears) : 0
        }
      );
  
      // Format the result with both Gregorian and Hijri dates
      const gregorianResult = DateTime.fromJSDate(result).toFormat('yyyy-MM-dd');
      const hijriResult = DateConverter.gregorianToHijri(result);
      const hijriMonth = DateConverter.getHijriMonthName(parseInt(hijriResult.split('/')[1]));
      
      setCalculatedEndDate(
        t('calculator.date.duration.resultFormat', {
          gregorian: gregorianResult,
          hijri: `${hijriResult} (${hijriMonth})`
        })
      );
  
    } catch (error) {
      console.error('Future date calculation error:', error);
      alert(t('calculator.common.error'));
    }
  };
  
  // Optional: Helper function to format duration for display
  const formatDuration = (years: number, months: number, days: number): string => {
    const parts = [];
    
    if (years > 0) {
      parts.push(`${years} ${t(years === 1 ? 'calculator.date.duration.year' : 'calculator.date.duration.years')}`);
    }
    
    if (months > 0) {
      parts.push(`${months} ${t(months === 1 ? 'calculator.date.duration.month' : 'calculator.date.duration.months')}`);
    }
    
    if (days > 0) {
      parts.push(`${days} ${t(days === 1 ? 'calculator.date.duration.day' : 'calculator.date.duration.days')}`);
    }
    
    return parts.join(t('calculator.date.duration.separator'));
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 text-white">
      <div className="max-w-4xl mx-auto p-6">
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle>{t('calculator.title')}</CardTitle>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="percentage" className="space-y-6">
              <TabsList>
                <TabsTrigger value="percentage">{t('calculator.tabs.percentage')}</TabsTrigger>
                <TabsTrigger value="vat">{t('calculator.tabs.vat')}</TabsTrigger>
                <TabsTrigger value="amount">{t('calculator.tabs.amount')}</TabsTrigger>
                <TabsTrigger value="date">{t('calculator.tabs.date')}</TabsTrigger>
                <TabsTrigger value="tafqit">{t('calculator.tabs.tafqit')}</TabsTrigger>
              </TabsList>

              {/* Percentage Calculator Tab */}
              <TabsContent value="percentage" className="space-y-4">
                <div className="space-y-4">
                  <div className="grid gap-4">
                    <div className="space-y-2">
                      <Label>{t('calculator.percentage.baseAmount')}</Label>
                      <Input
                        type="number"
                        value={baseAmount}
                        onChange={(e) => setBaseAmount(e.target.value)}
                        className="bg-slate-700/50"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label>{t('calculator.percentage.newAmount')}</Label>
                      <Input
                        type="number"
                        value={newAmount}
                        onChange={(e) => setNewAmount(e.target.value)}
                        className="bg-slate-700/50"
                      />
                    </div>
                  </div>
                  <Button 
                    onClick={calculatePercentageChange}
                    disabled={!baseAmount || !newAmount}
                    className="w-full"
                  >
                    {t('calculator.percentage.calculate')}
                  </Button>
                  {percentageResult && (
                    <Alert className="bg-slate-700/50 border-slate-600">
                      <AlertDescription>
                        {t('calculator.percentage.result')}: {percentageResult}
                      </AlertDescription>
                    </Alert>
                  )}
                </div>
              </TabsContent>

              {/* VAT Calculator Tab */}
              <TabsContent value="vat" className="space-y-4">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label>{t('calculator.vat.operation.label')}</Label>
                    <Select
                      value={vatOperation}
                      onValueChange={(value: 'total' | 'extract' | 'amount') => setVatOperation(value)}
                    >
                      <SelectTrigger className="bg-slate-700/50">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="total">{t('calculator.vat.operation.total')}</SelectItem>
                        <SelectItem value="extract">{t('calculator.vat.operation.extract')}</SelectItem>
                        <SelectItem value="amount">{t('calculator.vat.operation.amount')}</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>{t('calculator.vat.amount')}</Label>
                    <Input
                      type="number"
                      value={vatAmount}
                      onChange={(e) => setVatAmount(e.target.value)}
                      className="bg-slate-700/50"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>{t('calculator.vat.rate')}</Label>
                    <Input
                      type="number"
                      value={vatRate}
                      onChange={(e) => setVatRate(e.target.value)}
                      className="bg-slate-700/50"
                    />
                  </div>
                  <Button 
                    onClick={calculateVAT}
                    disabled={!vatAmount}
                    className="w-full"
                  >
                    {t('calculator.vat.calculate')}
                  </Button>
                  {Object.keys(vatResult).length > 0 && (
                    <Alert className="bg-slate-700/50 border-slate-600">
                      <AlertDescription className="space-y-2">
                        {vatResult.netAmount !== undefined && (
                          <div>{t('calculator.vat.results.net')}: {vatResult.netAmount.toFixed(2)}</div>
                        )}
                        {vatResult.vatAmount !== undefined && (
                          <div>{t('calculator.vat.results.vat')}: {vatResult.vatAmount.toFixed(2)}</div>
                        )}
                        {vatResult.totalAmount !== undefined && (
                          <div>{t('calculator.vat.results.total')}: {vatResult.totalAmount.toFixed(2)}</div>
                        )}
                      </AlertDescription>
                    </Alert>
                  )}
                </div>
              </TabsContent>

              {/* Amount with Percentage Tab */}
              <TabsContent value="amount" className="space-y-4">
                <div className="space-y-4">
                  <div className="grid gap-4">
                    <div className="space-y-2">
                      <Label>{t('calculator.amountPercentage.amount')}</Label>
                      <Input
                        type="number"
                        value={amount}
                        onChange={(e) => setAmount(e.target.value)}
                        className="bg-slate-700/50"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label>{t('calculator.amountPercentage.percentage')}</Label>
                      <Input
                        type="number"
                        value={percentage}
                        onChange={(e) => setPercentage(e.target.value)}
                        className="bg-slate-700/50"
                      />
                    </div>
                  </div>
                  <Button 
                    onClick={calculateAmountWithPercentage}
                    disabled={!amount || !percentage}
                    className="w-full"
                  >
                    {t('calculator.amountPercentage.calculate')}
                  </Button>
                  {Object.keys(percentageAmountResult).length > 0 && (
                    <Alert className="bg-slate-700/50 border-slate-600">
                      <AlertDescription className="space-y-2">
                        <div>{t('calculator.amountPercentage.results.original')}: {percentageAmountResult.originalAmount?.toFixed(2)}</div>
                        <div>{t('calculator.amountPercentage.results.adjustment')}: {percentageAmountResult.adjustmentAmount?.toFixed(2)}</div>
                        <div>{t('calculator.amountPercentage.results.final')}: {percentageAmountResult.finalAmount?.toFixed(2)}</div>
                      </AlertDescription>
                    </Alert>
                  )}
                </div>
              </TabsContent>

              {/* Date Converter Tab */}
<TabsContent value="date" className="space-y-6">
  <div className="space-y-8">
    {/* Date Conversion Section */}
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">{t('calculator.date.conversion.title')}</h3>
      <div className="grid md:grid-cols-2 gap-6">
        {/* Gregorian to Hijri */}
        <div className="space-y-4">
          <div className="space-y-2">
            <Label>{t('calculator.date.gregorian.label')}</Label>
            <Input
              type="date"
              value={gregorianDate}
              onChange={(e) => setGregorianDate(e.target.value)}
              className="bg-slate-700/50"
            />
          </div>
          <Button 
            onClick={convertGregorianToHijri}
            className="w-full"
            disabled={!gregorianDate}
          >
            {t('calculator.date.gregorian.convert')}
          </Button>
          {hijriDate && (
            <Alert className="bg-slate-700/50 border-slate-600">
              <AlertDescription dir="rtl">
                {hijriDate}
              </AlertDescription>
            </Alert>
          )}
        </div>

        {/* Hijri to Gregorian */}
        <div className="space-y-4">
          <div className="space-y-2">
            <Label>{t('calculator.date.hijri.label')}</Label>
            <Input
              type="text"
              value={hijriDate}
              onChange={(e) => setHijriDate(e.target.value)}
              placeholder={t('calculator.date.hijri.placeholder')}
              className="bg-slate-700/50 text-right"
              dir="rtl"
            />
            <p className="text-sm text-gray-400">
              {t('calculator.date.hijri.current')}: {DateConverter.getCurrentHijriDate()}
            </p>
          </div>
          <Button 
            onClick={convertHijriToGregorian}
            className="w-full"
            disabled={!hijriDate}
          >
            {t('calculator.date.hijri.convert')}
          </Button>
          {gregorianResult && (
            <Alert className="bg-slate-700/50 border-slate-600">
              <AlertDescription>
                {gregorianResult}
              </AlertDescription>
            </Alert>
          )}
        </div>
      </div>
    </div>

    {/* Date Difference Section */}
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">{t('calculator.date.difference.title')}</h3>
      <div className="grid md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label>{t('calculator.date.difference.start')}</Label>
          <Input
            type="date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
            className="bg-slate-700/50"
          />
        </div>
        <div className="space-y-2">
          <Label>{t('calculator.date.difference.end')}</Label>
          <Input
            type="date"
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
            className="bg-slate-700/50"
          />
        </div>
      </div>
      <Button 
        onClick={calculateDateDifference}
        className="w-full"
        disabled={!startDate || !endDate}
      >
        {t('calculator.date.difference.calculate')}
      </Button>
      {Object.keys(dateDifference).length > 0 && (
        <Alert className="bg-slate-700/50 border-slate-600">
          <AlertDescription className="space-y-2">
            <div>{t('calculator.date.difference.years')}: {dateDifference.years}</div>
            <div>{t('calculator.date.difference.months')}: {dateDifference.months}</div>
            <div>{t('calculator.date.difference.days')}: {dateDifference.days}</div>
          </AlertDescription>
        </Alert>
      )}
    </div>

    {/* Calculate Duration Section */}
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">{t('calculator.date.duration.title')}</h3>
      <div className="space-y-4">
        <div className="space-y-2">
          <Label>{t('calculator.date.duration.start')}</Label>
          <Input
            type="date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
            className="bg-slate-700/50"
          />
        </div>
        <div className="grid grid-cols-3 gap-4">
          <div className="space-y-2">
            <Label>{t('calculator.date.duration.duration.days')}</Label>
            <Input
              type="number"
              value={durationDays}
              onChange={(e) => setDurationDays(e.target.value)}
              className="bg-slate-700/50"
              min="0"
            />
          </div>
          <div className="space-y-2">
            <Label>{t('calculator.date.duration.duration.months')}</Label>
            <Input
              type="number"
              value={durationMonths}
              onChange={(e) => setDurationMonths(e.target.value)}
              className="bg-slate-700/50"
              min="0"
            />
          </div>
          <div className="space-y-2">
            <Label>{t('calculator.date.duration.duration.years')}</Label>
            <Input
              type="number"
              value={durationYears}
              onChange={(e) => setDurationYears(e.target.value)}
              className="bg-slate-700/50"
              min="0"
            />
          </div>
        </div>
        <Button 
          onClick={calculateFutureDate}
          className="w-full"
          disabled={!startDate || (!durationDays && !durationMonths && !durationYears)}
        >
          {t('calculator.date.duration.calculate')}
        </Button>
        {calculatedEndDate && (
          <Alert className="bg-slate-700/50 border-slate-600">
            <AlertDescription>
              {t('calculator.date.duration.result')}: {calculatedEndDate}
            </AlertDescription>
          </Alert>
        )}
      </div>
    </div>

    {/* Add Hijri Duration Calculator */}
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">{t('calculator.date.hijriDuration.title')}</h3>
      <div className="space-y-4">
        <div className="space-y-2">
          <Label>{t('calculator.date.hijriDuration.start')}</Label>
          <Input
            type="text"
            placeholder={t('calculator.date.hijri.placeholder')}
            value={hijriStartDate}
            onChange={(e) => setHijriStartDate(e.target.value)}
            className="bg-slate-700/50 text-right"
            dir="rtl"
          />
        </div>
        <div className="grid grid-cols-3 gap-4">
          <div className="space-y-2">
            <Label>{t('calculator.date.duration.duration.days')}</Label>
            <Input
              type="number"
              value={hijriDurationDays}
              onChange={(e) => setHijriDurationDays(e.target.value)}
              className="bg-slate-700/50"
              min="0"
            />
          </div>
          <div className="space-y-2">
            <Label>{t('calculator.date.duration.duration.months')}</Label>
            <Input
              type="number"
              value={hijriDurationMonths}
              onChange={(e) => setHijriDurationMonths(e.target.value)}
              className="bg-slate-700/50"
              min="0"
            />
          </div>
          <div className="space-y-2">
            <Label>{t('calculator.date.duration.duration.years')}</Label>
            <Input
              type="number"
              value={hijriDurationYears}
              onChange={(e) => setHijriDurationYears(e.target.value)}
              className="bg-slate-700/50"
              min="0"
            />
          </div>
        </div>
        <Button 
          onClick={calculateHijriFutureDate}
          className="w-full"
          disabled={!hijriStartDate || (!hijriDurationDays && !hijriDurationMonths && !hijriDurationYears)}
        >
          {t('calculator.date.hijriDuration.calculate')}
        </Button>
        {calculatedHijriEndDate && (
          <Alert className="bg-slate-700/50 border-slate-600">
            <AlertDescription dir="rtl">
              {t('calculator.date.hijriDuration.result')}: {calculatedHijriEndDate}
            </AlertDescription>
          </Alert>
        )}
      </div>
    </div>
  </div>
</TabsContent>

              {/* Tafqit Tab */}
              <TabsContent value="tafqit" className="space-y-4">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label>{t('calculator.tafqit.amount')}</Label>
                    <Input
                      type="number"
                      value={tafqitAmount}
                      onChange={(e) => setTafqitAmount(e.target.value)}
                      step="0.01"
                      className="bg-slate-700/50"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>{t('calculator.tafqit.language')}</Label>
                    <Select
                      value={tafqitLanguage}
                      onValueChange={(value: 'ar' | 'en') => setTafqitLanguage(value)}
                    >
                      <SelectTrigger className="bg-slate-700/50">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="ar">{t('calculator.tafqit.languages.arabic')}</SelectItem>
                        <SelectItem value="en">{t('calculator.tafqit.languages.english')}</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <Button 
                    onClick={() => {
                      const result = ProcurementCalculator.numberToWords(
                        Number(tafqitAmount),
                        {
                          language: tafqitLanguage,
                          comma: 'on'
                        }
                      );
                      setTafqitResult(result);
                    }}
                    className="w-full"
                    disabled={!tafqitAmount}
                  >
                    {t('calculator.tafqit.convert')}
                  </Button>
                  {tafqitResult && (
                    <Alert className="bg-slate-700/50 border-slate-600">
                      <AlertDescription dir={tafqitLanguage === 'ar' ? 'rtl' : 'ltr'}>
                        {tafqitResult}
                      </AlertDescription>
                    </Alert>
                  )}
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

================
File: src\pages\ChatPage.tsx
================
// src/pages/ChatPage.tsx
import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Languages } from 'lucide-react';
import { ChatInterface } from '@/features/chat/components/ChatInterface';
import { WelcomeSection } from '@/features/chat/components/WelcomeSection';
import { ChatMessage, ChatOptions } from '@/types/chat';
import { useChat } from '@/hooks/api/useChat';
import { useLanguage } from '@/hooks/useLanguage';

export default function ChatPage() {
  const { t, language, setLanguage } = useLanguage();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const { 
    sendMessage,
    chatHistory,
    initializeSession
  } = useChat();

  // Initialize chat session
  useEffect(() => {
    initializeSession();
  }, []);

  // Load chat history
  useEffect(() => {
    if (chatHistory.data) {
      setMessages(chatHistory.data);
    }
  }, [chatHistory.data]);

  const handleSendMessage = async (message: string, options: ChatOptions) => {
    try {
      setIsLoading(true);
      
      // Add user message immediately
      const userMessage: ChatMessage = {
        role: 'user',
        content: message,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, userMessage]);

      // Send message to API
      const response = await sendMessage.mutateAsync({ message, options });
      console.log('Received response:', response); // Debug log

      // Add assistant response
      const assistantMessage: ChatMessage = {
        role: 'assistant',
        content: response.answer,
        resources: response.sources,
        timestamp: new Date()
      };
      console.log('Created assistant message:', assistantMessage); // Debug log
      
      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Error sending message:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    handleSendMessage(suggestion, {
      saudiAccent: false,
      reasoning: false
    });
  };

  return (
    <div className={`min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 text-white ${
      language === 'ar' ? 'text-right' : 'text-left'
    }`}>
      <main className="max-w-7xl mx-auto">
        {messages.length === 0 ? (
          <WelcomeSection 
            onSuggestionClick={handleSuggestionClick}
          />
        ) : (
          <ChatInterface
            messages={messages}
            onSendMessage={handleSendMessage}
            isLoading={isLoading || chatHistory.isLoading}
          />
        )}
      </main>
    </div>
  );
}

================
File: src\pages\CorrectionPage.tsx
================
// src/pages/CorrectionPage.tsx
import { useState } from 'react';
import { useLanguage } from '@/hooks/useLanguage';
import { useCorrection } from '@/hooks/api/useCorrection';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import LoadingSpinner from '@/components/ui/loading-spinner';

export default function CorrectionPage() {
  const { t, language, setLanguage } = useLanguage();
  const [inputText, setInputText] = useState('');
  const [correctedText, setCorrectedText] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState<'ar' | 'en'>('en');
  
  const correction = useCorrection();

  const handleSubmit = async () => {
    if (!inputText.trim()) return;

    try {
      const result = await correction.mutateAsync({
        text: inputText,
        language: selectedLanguage,
      });

      if (result.status === 'success') {
        setCorrectedText(result.corrected_text);
      }
    } catch (error) {
      console.error('Correction error:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 text-white">
      <div className="max-w-4xl mx-auto p-6">
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle>{t('correction.title')}</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Language Toggle */}
            <div className="flex items-center justify-end space-x-2">
              <Label htmlFor="language-toggle">
                {selectedLanguage === 'ar' ? 'العربية' : 'English'}
              </Label>
              <Switch
                id="language-toggle"
                checked={selectedLanguage === 'ar'}
                onCheckedChange={(checked) => setSelectedLanguage(checked ? 'ar' : 'en')}
              />
            </div>

            {/* Input Section */}
            <div className="space-y-2">
              <Label>{t('correction.inputLabel')}</Label>
              <Textarea
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                placeholder={t('correction.inputPlaceholder')}
                className="min-h-[200px]"
                dir={selectedLanguage === 'ar' ? 'rtl' : 'ltr'}
              />
            </div>

            {/* Action Button */}
            <Button 
              onClick={handleSubmit}
              disabled={correction.isPending || !inputText.trim()}
              className="w-full"
            >
              {correction.isPending ? (
                <div className="flex items-center space-x-2">
                  <LoadingSpinner size="sm" />
                  <span>{t('correction.correcting')}</span>
                </div>
              ) : (
                t('correction.correct')
              )}
            </Button>

            {/* Results Section */}
            {correctedText && (
              <div className="space-y-2">
                <Label>{t('correction.outputLabel')}</Label>
                <div 
                  className="p-4 rounded-md bg-slate-700/50 min-h-[200px] whitespace-pre-wrap"
                  dir={selectedLanguage === 'ar' ? 'rtl' : 'ltr'}
                >
                  {correctedText}
                </div>
              </div>
            )}

            {/* Error Display */}
            {correction.error && (
              <Alert variant="destructive">
                <AlertDescription>
                  {t('correction.error')}
                </AlertDescription>
              </Alert>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

================
File: src\pages\LandingPage.tsx
================
import React from 'react';
import { useLanguage } from '@/hooks/useLanguage';
import { Search, MessageSquare, Book } from 'lucide-react';
import { useNavigate } from 'react-router-dom';


// Hero Section
const Hero = () => {
  const { t, direction } = useLanguage();
  
  return (
    <div className="relative mt-20 px-6 max-w-7xl mx-auto">
      <div className="grid grid-cols-2 gap-12 items-center">
        <div className={`${direction === 'rtl' ? 'order-2' : 'order-1'}`}>
          <h1 className="text-5xl font-medium tracking-wide leading-tight text-indigo-950">
            {t('landing.hero.title')}
          </h1>
          <p className="mt-6 text-lg text-indigo-900">
            {t('landing.hero.description')}
          </p>
          <button className="mt-8 px-8 py-3 border-2 border-indigo-950 text-indigo-950 rounded-sm font-medium">
            {t('landing.hero.learnMore')}
          </button>
        </div>
        <div className={`${direction === 'rtl' ? 'order-1' : 'order-2'}`}>
          <img
            src="src/assets/designer_1.png"
            alt="Hero illustration"
            className="w-full h-auto object-cover rounded-lg"
          />
        </div>
      </div>
    </div>
  );
};

// Feature Section
interface FeatureProps {
  icon: React.ElementType;
  title: string;
  description: string;
  reverse?: boolean;
}

const Feature: React.FC<FeatureProps> = ({ icon: Icon, title, description, reverse = false }) => {
  const { direction } = useLanguage();
  
  return (
    <div className="mt-32 px-6 max-w-7xl mx-auto">
      <div className={`grid grid-cols-2 gap-12 items-center ${reverse ? 'direction-rtl' : ''}`}>
        <div className={`${reverse ? 'order-2' : 'order-1'}`}>
          <div className="w-12 h-12 rounded-full bg-indigo-100 flex items-center justify-center mb-6">
            <Icon className="w-6 h-6 text-indigo-950" />
          </div>
          <h2 className="text-4xl font-medium text-indigo-950 mb-4">{title}</h2>
          <p className="text-lg text-indigo-900">{description}</p>
        </div>
        <div className={`${reverse ? 'order-1' : 'order-2'}`}>
          <img
            src="src/assets/design_2.png"
            alt="Feature illustration"
            className="w-full h-auto object-cover rounded-lg"
          />
        </div>
      </div>
    </div>
  );
};

// Price Section
const Pricing = () => {
  const { t } = useLanguage();
  
  return (
    <div className="mt-32 px-6 py-12 text-center">
      <h2 className="text-4xl font-medium text-indigo-950 mb-6">
        {t('landing.pricing.title')}
      </h2>
      <p className="max-w-2xl mx-auto text-lg text-indigo-900 mb-8">
        {t('landing.pricing.description')}
      </p>
      <div className="text-5xl font-medium text-indigo-950 mb-4">
        {t('landing.pricing.price')}
      </div>
      <button className="mt-8 px-8 py-3 bg-indigo-950 text-white rounded-sm font-medium">
        {t('landing.pricing.cta')}
      </button>
    </div>
  );
};


// Main Landing Page
const LandingPage = () => {
  const { t } = useLanguage();
  const navigate = useNavigate();

  const features = [
    {
      icon: Search,
      title: t('landing.features.search.title'),
      description: t('landing.features.search.description'),
    },
    {
      icon: MessageSquare,
      title: t('landing.features.assistant.title'),
      description: t('landing.features.assistant.description'),
      reverse: true,
    },
    {
      icon: Book,
      title: t('landing.features.library.title'),
      description: t('landing.features.library.description'),
    },
  ];

  return (
    <div className="min-h-screen bg-white">
      <Hero />
      {features.map((feature, index) => (
        <Feature key={index} {...feature} />
      ))}
      <Pricing />
    </div>
  );
};

export default LandingPage;

================
File: src\pages\LibraryPage.tsx
================
// src/pages/LibraryPage.tsx
import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Languages } from 'lucide-react';
import { useLanguage } from '@/hooks/useLanguage';
import { BreadcrumbNav } from '@/features/library/components/BreadcrumbNav';
import { SearchToolbar } from '@/features/library/components/SearchToolbar';
import { FileList } from '@/features/library/components/FileList';
import { Alert, AlertDescription } from '@/components/ui/alert';
import LoadingSpinner from '@/components/ui/loading-spinner';
import { FileOrFolder } from '@/types';
import { 
    useLibrary, 
    useLibrarySearch, 
    useFileDownload, 
    useFileView,
    downloadFile ,
    base64ToBlob,
  openFileInNewTab
  } from '@/hooks/api/useLibrary';

export default function LibraryPage() {
  const { t, language, setLanguage } = useLanguage();
  const [items, setItems] = useState<FileOrFolder[]>([]);
  const [query, setQuery] = useState('');
  const [isDeepSearch, setIsDeepSearch] = useState(false);
  const [downloadingFiles, setDownloadingFiles] = useState<Set<string>>(new Set());
  const [viewingFiles, setViewingFiles] = useState<Set<string>>(new Set());
  const [breadcrumbs, setBreadcrumbs] = useState([
    { id: "", name: t('library.root') }
  ]);

  const currentFolderId = breadcrumbs[breadcrumbs.length - 1].id;

  // Use React Query hooks
  const { 
    data: folderData,
    isLoading: isFolderLoading,
    error: folderError
  } = useLibrary(currentFolderId);

  const {
    data: searchData,
    isLoading: isSearching,
    error: searchError,
    refetch: refetchSearch
  } = useLibrarySearch(query, isDeepSearch);

  const fileDownload = useFileDownload();
  const fileView = useFileView();

  // Update items when folder data changes
  useEffect(() => {
    console.log('Folder data received:', folderData);
    if (folderData) { // Remove .data check since folderData is the array
        setItems(folderData);
      }
  }, [folderData]);

  // Update items when search data changes
  useEffect(() => {
    console.log('Search data received:', searchData);
    if (query && searchData) { // Remove .data check since searchData is the array
      setItems(searchData);
    }
  }, [query, searchData]);

  const handleSearch = () => {
    if (query.trim()) {
      refetchSearch();
    } else {
      // If search is cleared, show folder contents
      setItems(folderData || []);
    }
  };

  const handleFolderClick = async (folder: FileOrFolder) => {
    setBreadcrumbs(prev => [...prev, { id: folder.id, name: folder.name }]);
  };

  const handleBreadcrumbClick = (index: number) => {
    setBreadcrumbs(prev => prev.slice(0, index + 1));
  };

  const handleFileDownload = async (file: FileOrFolder) => {
    try {
      setDownloadingFiles(prev => new Set(prev).add(file.id));
      const blob = await fileDownload.mutateAsync(file.id);
      downloadFile(blob, file.name);
    } catch (error) {
      console.error('Download error:', error);
    } finally {
      setDownloadingFiles(prev => {
        const newSet = new Set(prev);
        newSet.delete(file.id);
        return newSet;
      });
    }
  };

  const handleFileView = async (file: FileOrFolder) => {
    try {
      setViewingFiles(prev => new Set(prev).add(file.id));
      const data = await fileView.mutateAsync(file.id);
      
      // Convert base64 to blob with correct mime type
      const blob = base64ToBlob(data.content, data.mimeType);
      
      // Open in new tab
      openFileInNewTab(blob);
    } catch (error) {
      console.error('View error:', error);
      alert(t('library.viewError'));
    } finally {
      setViewingFiles(prev => {
        const newSet = new Set(prev);
        newSet.delete(file.id);
        return newSet;
      });
    }
  };

  console.log('Current items:', items); // Debug log

  return (
    <div className={`min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 text-white ${
      language === 'ar' ? 'text-right' : 'text-left'
    }`}>
      <main className="max-w-7xl mx-auto px-4 py-6">
        <div className="space-y-6">
          <div className="flex flex-col gap-4">
            <h1 className="text-3xl font-bold">{t('library.title')}</h1>

            {breadcrumbs.length > 1 && (
              <BreadcrumbNav
                items={breadcrumbs}
                onNavigate={handleBreadcrumbClick}
              />
            )}

            <SearchToolbar
              query={query}
              onQueryChange={setQuery}
              isDeepSearch={isDeepSearch}
              onDeepSearchChange={setIsDeepSearch}
              onSearch={handleSearch}
            />
          </div>

          {(isFolderLoading || isSearching) ? (
            <div className="flex justify-center py-12">
              <LoadingSpinner size="lg" />
            </div>
          ) : (folderError || searchError) ? (
            <Alert variant="destructive">
              <AlertDescription>
                {t('library.error')}
              </AlertDescription>
            </Alert>
          ) : items && items.length > 0 ? (
            <FileList
              items={items}
              onFolderClick={handleFolderClick}
              onFileDownload={handleFileDownload}
              onFileView={handleFileView}
              downloadingFiles={downloadingFiles}
              viewingFiles={viewingFiles}
            />
          ) : (
            <div className="text-center py-12 text-gray-400">
              {t('library.noResults')}
            </div>
          )}
        </div>
      </main>
    </div>
  );
}

================
File: src\pages\SearchPage.tsx
================
// src/pages/SearchPage.tsx
import { useState, useCallback } from 'react';
import { useSearch } from '@/hooks/api/useSearch';
import { SearchBar } from '@/features/search/components/SearchBar';
import { SearchFilters } from '@/features/search/components/SearchFilters';
import { SearchResults } from '@/features/search/components/SearchResults';
import { ResourceType } from '@/types';
import { useLanguage } from '@/hooks/useLanguage';
import { LanguageSwitch } from '@/components/common/LanguageSwitch';
import { Link } from 'react-router-dom';
import { Alert, AlertDescription } from '@/components/ui/alert';
import LoadingSpinner  from '@/components/ui/loading-spinner';
import { debounce } from '@/lib/utils';

export default function SearchPage() {
  const { t, language } = useLanguage();
  const [query, setQuery] = useState('');
  const [selectedType, setSelectedType] = useState<ResourceType>();
  
  const {
    data: results,
    isLoading,
    isError,
    error,
    refetch
  } = useSearch(query, selectedType);

  // Debounce the search to avoid too many API calls
  const debouncedSearch = useCallback(
    debounce(() => {
      if (query.trim()) {
        refetch();
      }
    }, 500),
    [query, refetch]
  );

  const handleSearch = () => {
    if (query.trim()) {
      refetch();
    }
  };

  const handleQueryChange = (newQuery: string) => {
    setQuery(newQuery);
    // Only search if the query is not empty
    if (newQuery.trim()) {
      debouncedSearch();
    }
  };

  const handleTypeChange = (type: ResourceType) => {
    setSelectedType(type);
    // If we have a query, search with the new type
    if (query.trim()) {
      refetch();
    }
  };


  return (
    <div className={`min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 text-white ${
      language === 'ar' ? 'text-right' : 'text-left'
    }`}>
      <main className="max-w-7xl mx-auto px-4 py-6">
        <div className="grid grid-cols-1 md:grid-cols-[250px_1fr] gap-8">
          {/* Filters Sidebar */}
          <aside className="space-y-6">
            <SearchFilters
              selectedType={selectedType}
              onTypeChange={handleTypeChange}
            />
          </aside>

          {/* Main Content */}
          <div className="space-y-6">
            <SearchBar
              query={query}
              onQueryChange={handleQueryChange}
              onSearch={handleSearch}
              isLoading={isLoading}
            />

            {isLoading ? (
              <div className="flex justify-center py-12">
                <LoadingSpinner size="lg" />
              </div>
            ) : isError ? (
              <Alert variant="destructive">
                <AlertDescription>
                  {error?.message || t('common.error')}
                </AlertDescription>
              </Alert>
            ) : results?.data && results.data.length > 0 ? (
              <SearchResults
                results={results.data}
                searchQuery={query}
              />
            ) : query ? (
              <div className="text-center py-12 text-gray-400">
                {t('search.noResults')}
              </div>
            ) : null}
          </div>
        </div>
      </main>
    </div>
  );
}

================
File: src\pages\TemplatesPage.tsx
================
// src/pages/TemplatesPage.tsx
import { useState } from 'react';
import { useTemplates, Template } from '@/hooks/api/useTemplates';
import { useLanguage } from '@/hooks/useLanguage';
import { useToast } from '@/hooks/useToast';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import LoadingSpinner from '@/components/ui/loading-spinner';
import { ChevronLeft } from 'lucide-react';
import { TemplateCard } from '@/features/templates/components/TemplateCard';
import { TemplateForm } from '@/features/templates/components/TemplateForm';
import { EmailDialog } from '@/features/templates/components/EmailDialog';
import { DownloadActions } from '@/features/templates/components/DownloadActions';

export default function TemplatesPage() {
  const { t } = useLanguage();
  const { showToast } = useToast();
  
  // State
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
  const [generatedDocPath, setGeneratedDocPath] = useState<string>('');
  const [isEmailDialogOpen, setIsEmailDialogOpen] = useState(false);

  // Queries and Mutations
  const {
    getAllTemplates,
    generateDocument,
    downloadDocument,
    sendEmail
  } = useTemplates();

  // Handlers
  const handleSelectTemplate = (template: Template) => {
    showToast(t('templates.generation.success'), 'success');
    setSelectedTemplate(template);
    setGeneratedDocPath('');
  };

  const handleGenerateDocument = async (values: Record<string, string>) => {
    try {
      if (!selectedTemplate) return;

      const result = await generateDocument.mutateAsync({
        templateName: selectedTemplate.filename,
        values
      });

      setGeneratedDocPath(result.doc_path);
      showToast(t('templates.generation.success'), 'success');
    } catch (error) {
      showToast(t('templates.generation.error'), 'error' );
    }
  };

  const handleDownload = async (format: 'pdf' | 'docx') => {
    try {
      await downloadDocument.mutateAsync({
        docPath: generatedDocPath,
        format
      });
      showToast(t('templates.download.success'),'success' );
    } catch (error) {
      showToast(t('templates.download.error'), 'error' );
    }
  };

  const handleSendEmail = async (data: {
    recipient_email: string;
    subject: string;
    body: string;
    doc_path: string;
  }) => {
    try {
      await sendEmail.mutateAsync(data);
      setIsEmailDialogOpen(false);
      showToast(t('templates.email.success'), 'success' );
    } catch (error) {
      showToast(t('templates.email.error'),'error' );
    }
  };

  const handleBack = () => {
    setSelectedTemplate(null);
    setGeneratedDocPath('');
  };

  // Loading State
  if (getAllTemplates.isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-4rem)]">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  // Error State
  if (getAllTemplates.error) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-4rem)]">
        <Card className="max-w-md">
          <CardContent className="p-6 text-center">
            <p className="text-red-500 mb-4">{t('common.error')}</p>
            <Button onClick={() => getAllTemplates.refetch()}>
              {t('common.retry')}
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="py-8 px-4 sm:px-6 lg:px-8 min-h-[calc(100vh-4rem)]">
      {/* Header */}
      <div className="max-w-7xl mx-auto">
        <div className="flex items-center gap-4 mb-8">
          {selectedTemplate && (
            <Button
              variant="ghost"
              size="sm"
              onClick={handleBack}
              className="mr-2"
            >
              <ChevronLeft className="w-4 h-4 mr-1" />
              {t('templates.back')}
            </Button>
          )}
          <h1 className="text-3xl font-bold">
            {selectedTemplate ? selectedTemplate.display_name : t('templates.title')}
          </h1>
        </div>

        {/* Content */}
        {!selectedTemplate ? (
          // Templates Grid
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {getAllTemplates.data?.map((template) => (
              <TemplateCard
                key={template.filename}
                template={template}
                onSelect={handleSelectTemplate}
              />
            ))}
          </div>
        ) : (
          // Template Form and Actions
          <div className="max-w-2xl mx-auto">
            <Card>
              <CardContent className="p-6">
                {!generatedDocPath ? (
                  <TemplateForm
                    template={selectedTemplate}
                    onSubmit={handleGenerateDocument}
                    isLoading={generateDocument.isPending}
                  />
                ) : (
                  <div className="space-y-6">
                    <p className="text-green-600 text-sm">
                      {t('templates.generation.success')}
                    </p>
                    <DownloadActions
                      onDownloadPDF={() => handleDownload('pdf')}
                      onDownloadDOCX={() => handleDownload('docx')}
                      onEmail={() => setIsEmailDialogOpen(true)}
                      isDownloading={downloadDocument.isPending}
                    />
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}
      </div>

      {/* Email Dialog */}
      <EmailDialog
        isOpen={isEmailDialogOpen}
        onClose={() => setIsEmailDialogOpen(false)}
        onSend={handleSendEmail}
        docPath={generatedDocPath}
        isLoading={sendEmail.isPending}
      />
    </div>
  );
}

================
File: src\providers\LanguageProvider.tsx
================
// src/providers/LanguageProvider.tsx
import React, { createContext, useEffect, useState } from 'react';
import { en } from '@/config/i18n/translations/en';
import { ar } from '@/config/i18n/translations/ar';

export type Language = 'ar' | 'en';
export type Direction = 'ltr' | 'rtl';

interface LanguageContextType {
  language: Language;
  direction: Direction;
  setLanguage: (lang: Language) => void;
  translations: {
    en: typeof en;
    ar: typeof ar;
  };
}

export const LanguageContext = createContext<LanguageContextType | null>(null);

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [language, setLanguageState] = useState<Language>(() => {
    return (localStorage.getItem('language') as Language) || 'ar';
  });

  const direction: Direction = language === 'ar' ? 'rtl' : 'ltr';

  const translations = {
    en,
    ar,
  };

  const setLanguage = (newLanguage: Language) => {
    setLanguageState(newLanguage);
    localStorage.setItem('language', newLanguage);
    document.documentElement.dir = newLanguage === 'ar' ? 'rtl' : 'ltr';
    document.documentElement.lang = newLanguage;
  };

  useEffect(() => {
    document.documentElement.dir = direction;
    document.documentElement.lang = language;
  }, [direction, language]);

  return (
    <LanguageContext.Provider value={{ language, direction, setLanguage, translations }}>
      {children}
    </LanguageContext.Provider>
  );
}

================
File: src\providers\ThemeProvider.tsx
================
// src/providers/ThemeProvider.tsx
import React, { createContext, useContext, useEffect, useState } from 'react';

type Theme = 'light' | 'dark';

interface ThemeContextType {
  theme: Theme;
  setTheme: (theme: Theme) => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({
  children,
  defaultTheme = 'light',
}: {
  children: React.ReactNode;
  defaultTheme?: Theme;
}) {
  const [theme, setTheme] = useState<Theme>(() => {
    const savedTheme = localStorage.getItem('theme') as Theme;
    return savedTheme || defaultTheme;
  });

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove('light', 'dark');
    root.classList.add(theme);
    localStorage.setItem('theme', theme);
  }, [theme]);

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}

================
File: src\providers\ToastProvider.tsx
================
// src/components/common/ToastProvider.tsx
import { ToastContainer } from 'react-toastify';
import { useLanguage } from '@/hooks/useLanguage';
import 'react-toastify/dist/ReactToastify.css';

export function ToastProvider() {
  const { direction } = useLanguage();

  return (
    <ToastContainer
      position={direction === 'rtl' ? 'top-left' : 'top-right'}
      rtl={direction === 'rtl'}
      autoClose={3000}
      hideProgressBar={false}
      newestOnTop
      closeOnClick
      pauseOnFocusLoss
      draggable
      pauseOnHover
    />
  );
}

================
File: src\services\api\endpoints.ts
================
// src/services/api/endpoints.ts
export const endpoints = {
    auth: {
      login: '/auth/login',
      logout: '/auth/logout',
      profile: '/auth/profile',
    },
    chat: {
      send: '/chat',
      history: '/chat/history',
    },
    library: {
      list: '/library/list-folder-contents',
      search: '/library/search-files',
      download: '/library/download',
    },
    search: {
      resources: '/search',
    },
    language: {
      set: '/language',
      get: '/language',
    },
  } as const;

================
File: src\services\api\requests.ts
================
// src/services/api/requests.ts
import { api } from '../../lib/axios';
import { endpoints } from './endpoints';
import { ApiResponse, ApiError } from './types';
import axios from 'axios';

export async function apiRequest<T>(
  method: 'GET' | 'POST' | 'PUT' | 'DELETE',
  url: string,
  data?: unknown
): Promise<ApiResponse<T>> {
  try {
    const response = await api.request<ApiResponse<T>>({
      method,
      url,
      data,
    });
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      const apiError: ApiError = {
        message: error.response?.data?.message || 'An error occurred',
        code: error.response?.data?.code || 'UNKNOWN_ERROR',
        status: error.response?.status || 500,
      };
      throw apiError;
    }
    throw error;
  }
}

================
File: src\services\api\types.ts
================
// src/services/api/types.ts
export interface ApiError {
    message: string;
    code: string;
    status: number;
  }
  
  export type ApiResponse<T> = {
    data: T;
    message?: string;
    status: number;
  };

================
File: src\stores\uiStore.ts
================
// src/stores/uiStore.ts
import { create } from 'zustand';

interface UIState {
  isSidebarOpen: boolean;
  isSearchOpen: boolean;
  toggleSidebar: () => void;
  toggleSearch: () => void;
}

export const useUIStore = create<UIState>((set) => ({
  isSidebarOpen: false,
  isSearchOpen: false,
  toggleSidebar: () => set((state) => ({ isSidebarOpen: !state.isSidebarOpen })),
  toggleSearch: () => set((state) => ({ isSearchOpen: !state.isSearchOpen })),
}));

================
File: src\styles\base.css
================
/* src/styles/base.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --font-sans: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
      'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji',
      'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
    --font-arabic: 'Noto Sans Arabic', Arial, sans-serif;
  }

  /* Set core body defaults */
  body {
    @apply bg-gray-50 text-gray-900 antialiased;
    text-rendering: optimizeLegibility;
  }

  /* RTL Support */
  [dir="rtl"] {
    font-family: var(--font-arabic);
  }

  [dir="ltr"] {
    font-family: var(--font-sans);
  }

  /* Focus styles */
  :focus-visible {
    @apply outline-none ring-2 ring-blue-500 ring-offset-2;
  }

  /* Scrollbar styles */
  ::-webkit-scrollbar {
    @apply w-2 h-2;
  }

  ::-webkit-scrollbar-track {
    @apply bg-gray-100;
  }

  ::-webkit-scrollbar-thumb {
    @apply bg-gray-300 rounded-full;
  }

  ::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-400;
  }
}

@layer components {
  /* Container styles */
  .container {
    @apply mx-auto px-4 sm:px-6 lg:px-8;
    max-width: 80rem;
  }

  /* Button base styles */
  .btn {
    @apply inline-flex items-center justify-center rounded-md px-4 py-2 text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50;
  }

  .btn-primary {
    @apply bg-primary-600 text-white hover:bg-primary-700 focus-visible:ring-blue-500;
  }

  .btn-secondary {
    @apply bg-gray-100 text-gray-900 hover:bg-gray-200 focus-visible:ring-gray-500;
  }

  /* Form control base styles */
  .form-control {
    @apply block w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-gray-900 placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 sm:text-sm;
  }

  /* Card base styles */
  .card {
    @apply rounded-lg border border-gray-200 bg-white shadow-sm;
  }

  .card-header {
    @apply border-b border-gray-200 px-4 py-3;
  }

  .card-body {
    @apply px-4 py-3;
  }

  /* Badge base styles */
  .badge {
    @apply inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium;
  }

  .badge-primary {
    @apply bg-primary-100 text-primary-800;
  }

  .badge-success {
    @apply bg-success-300 text-success-800;
  }

  .badge-warning {
    @apply bg-warning-300 text-warning-800;
  }

  .badge-error {
    @apply bg-error-300 text-error-800;
  }
}

@layer utilities {
  /* Direction-aware utilities */
  .margin-start {
    @apply [dir="ltr"]:ml-0 [dir="rtl"]:mr-0;
  }

  .margin-end {
    @apply [dir="ltr"]:mr-0 [dir="rtl"]:ml-0;
  }

  .padding-start {
    @apply [dir="ltr"]:pl-0 [dir="rtl"]:pr-0;
  }

  .padding-end {
    @apply [dir="ltr"]:pr-0 [dir="rtl"]:pl-0;
  }
}

================
File: src\styles\responsive.css
================
/* src/styles/responsive.css */
@layer utilities {
  /* Hide on specific breakpoints */
  .hide-xs {
    @apply xs:hidden;
  }
  .hide-sm {
    @apply sm:hidden;
  }
  .hide-md {
    @apply md:hidden;
  }
  .hide-lg {
    @apply lg:hidden;
  }
  .hide-xl {
    @apply xl:hidden;
  }
  .hide-2xl {
    @apply 2xl:hidden;
  }

  /* Show only on specific breakpoints */
  .show-xs {
    @apply hidden xs:block;
  }
  .show-sm {
    @apply hidden sm:block;
  }
  .show-md {
    @apply hidden md:block;
  }
  .show-lg {
    @apply hidden lg:block;
  }
  .show-xl {
    @apply hidden xl:block;
  }
  .show-2xl {
    @apply hidden 2xl:block;
  }

  /* Container paddings */
  .container-padding {
    @apply px-4 sm:px-6 lg:px-8;
  }

  /* Responsive spacing */
  .responsive-gap {
    @apply gap-4 md:gap-6 lg:gap-8;
  }
  
  .responsive-margin {
    @apply m-4 md:m-6 lg:m-8;
  }
  
  .responsive-padding {
    @apply p-4 md:p-6 lg:p-8;
  }
}

================
File: src\styles\theme\index.ts
================
// src/styles/theme/index.ts
export const theme = {
    colors: {
      // Brand Colors
      primary: {
        50:  '#f0f9ff',
        100: '#e0f2fe',
        200: '#bae6fd',
        300: '#7dd3fc',
        400: '#38bdf8',
        500: '#0ea5e9',
        600: '#0284c7',
        700: '#0369a1',
        800: '#075985',
        900: '#0c4a6e',
      },
      // Accent Colors - Purple
      accent: {
        50: '#faf5ff',
        100: '#f3e8ff',
        200: '#e9d5ff',
        300: '#d8b4fe',
        400: '#c084fc',
        500: '#a855f7',
        600: '#9333ea',
        700: '#7e22ce',
        800: '#6b21a8',
        900: '#581c87',
      },
      // Semantic Colors
      success: {
        light: '#86efac',
        DEFAULT: '#22c55e',
        dark: '#15803d',
      },
      warning: {
        light: '#fde047',
        DEFAULT: '#eab308',
        dark: '#a16207',
      },
      error: {
        light: '#fca5a5',
        DEFAULT: '#ef4444',
        dark: '#b91c1c',
      },
      // Gray Scale
      gray: {
        50: '#f9fafb',
        100: '#f3f4f6',
        200: '#e5e7eb',
        300: '#d1d5db',
        400: '#9ca3af',
        500: '#6b7280',
        600: '#4b5563',
        700: '#374151',
        800: '#1f2937',
        900: '#111827',
      },
    },
    
    spacing: {
      px: '1px',
      0: '0',
      0.5: '0.125rem',
      1: '0.25rem',
      1.5: '0.375rem',
      2: '0.5rem',
      2.5: '0.625rem',
      3: '0.75rem',
      3.5: '0.875rem',
      4: '1rem',
      5: '1.25rem',
      6: '1.5rem',
      7: '1.75rem',
      8: '2rem',
      9: '2.25rem',
      10: '2.5rem',
      12: '3rem',
      14: '3.5rem',
      16: '4rem',
      20: '5rem',
      24: '6rem',
      28: '7rem',
      32: '8rem',
      36: '9rem',
      40: '10rem',
      44: '11rem',
      48: '12rem',
      52: '13rem',
      56: '14rem',
      60: '15rem',
      64: '16rem',
      72: '18rem',
      80: '20rem',
      96: '24rem',
    },
  
    fontFamily: {
      sans: ['var(--font-sans)', 'system-ui', '-apple-system', 'sans-serif'],
      arabic: ['var(--font-arabic)', 'Arial', 'sans-serif'],
    },
  
    fontSize: {
        xs: ['0.75rem', {
          lineHeight: '1rem'
        }],
        sm: ['0.875rem', {
          lineHeight: '1.25rem'
        }],
        base: ['1rem', {
          lineHeight: '1.5rem'
        }],
        lg: ['1.125rem', {
          lineHeight: '1.75rem'
        }],
        xl: ['1.25rem', {
          lineHeight: '1.75rem'
        }],
        '2xl': ['1.5rem', {
          lineHeight: '2rem'
        }],
        '3xl': ['1.875rem', {
          lineHeight: '2.25rem'
        }],
        '4xl': ['2.25rem', {
          lineHeight: '2.5rem'
        }],
        '5xl': ['3rem', {
          lineHeight: '1'
        }],
        '6xl': ['3.75rem', {
          lineHeight: '1'
        }]
      },
  
    borderRadius: {
      none: '0',
      sm: '0.125rem',
      DEFAULT: '0.25rem',
      md: '0.375rem',
      lg: '0.5rem',
      xl: '0.75rem',
      '2xl': '1rem',
      '3xl': '1.5rem',
      full: '9999px',
    },
  
    boxShadow: {
      sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',
      DEFAULT: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',
      md: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
      lg: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',
      xl: '0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)',
    },
  
    animation: {
      none: 'none',
      spin: 'spin 1s linear infinite',
      ping: 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',
      pulse: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      bounce: 'bounce 1s infinite',
    },
  };

================
File: src\styles\theme\tailwind.config.ts
================
// src/styles/theme/tailwind.config.ts
import type { Config } from 'tailwindcss';
import { theme } from './index';

const config = {
  content: ['./src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {
      colors: theme.colors,
      spacing: theme.spacing,
      fontFamily: theme.fontFamily,
      fontSize: {
        xs: ['0.75rem', { lineHeight: '1rem' }],
        sm: ['0.875rem', { lineHeight: '1.25rem' }],
        base: ['1rem', { lineHeight: '1.5rem' }],
        lg: ['1.125rem', { lineHeight: '1.75rem' }],
        xl: ['1.25rem', { lineHeight: '1.75rem' }],
        '2xl': ['1.5rem', { lineHeight: '2rem' }],
        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],
        '5xl': ['3rem', { lineHeight: '1' }],
        '6xl': ['3.75rem', { lineHeight: '1' }]
      },
      borderRadius: theme.borderRadius,
      boxShadow: theme.boxShadow,
      animation: theme.animation,
    },
  },
  plugins: [],
} satisfies Config;

export default config;

================
File: src\types\admin.ts
================
// src/types/admin.ts
export interface Contact {
  Date: string;
  Name: string;
  Email: string;
  Message: string;
}

export interface Credentials {
  username: string;
  password: string;
}

export interface ApiResponse {
  success: boolean;
  error?: string;
}

export interface ContactSubmitResponse extends ApiResponse {
  message?: string;
}

================
File: src\types\api.ts
================
// src/types/api.ts
export interface ApiError {
    message: string;
    code: string;
    status: number;
  }
  
  export interface ApiResponse<T> {
    data: T;
    message?: string;
    status: number;
  }

================
File: src\types\calculator.ts
================
// src/types/calculator.ts
export interface PercentageResult {
    percentage: string;
  }
  
  export interface VATResult {
    netAmount?: number;
    vatAmount?: number;
    totalAmount?: number;
  }
  
  export interface AmountWithPercentageResult {
    originalAmount?: number;
    adjustmentAmount?: number;
    finalAmount?: number;
  }
  
  export interface DateDifference {
    days?: number;
    months?: number;
    years?: number;
  }

================
File: src\types\chat.ts
================
// src/types/chat.ts
export interface Resource {
  content: string;
  metadata: {
    article_number: number;
    article_type: string;
    chapter_name: string;
    chapter_number: number;
    section_name: string;
    section_number: number;
    summary: string;
  };
}

export interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  resources?: Resource[];
  timestamp: Date;
}

export interface ChatResponse {
  answer: string;
  sources: Resource[];
  error?: string | null;
}

export interface HistoryResponse {
  messages: ChatMessage[];
  error?: string;
}

export interface ChatOptions {
  saudiAccent: boolean;
  reasoning: boolean;
}

================
File: src\types\correction.ts
================
export interface CorrectionRequest {
    text: string;
    language: 'ar' | 'en';
  }
  
export  interface CorrectionResponse {
    corrected_text: string;
    status: 'success' | 'error';
    error?: string;
  }

================
File: src\types\index.ts
================
// src/types/index.ts
export * from './chat';
export * from './search';
export * from './resource';
export * from './api';
export * from './language';
export * from './correction';

================
File: src\types\language.ts
================
export type Language = 'ar' | 'en';

export type Direction = 'ltr' | 'rtl';

export interface Translation {
  [key: string]: string | Translation;
}

export interface LanguageContextType {
  language: Language;
  direction: Direction;
  setLanguage: (lang: Language) => void;
  t: (key: string, params?: Record<string, string>) => string;
}

================
File: src\types\resource.ts
================
// src/types/resource.ts
export interface FileOrFolder {
    mimeType: string;
    size?: string;
    id: string;
    name: string;
    createdTime: string;
    modifiedTime: string;
  }

================
File: src\types\search.ts
================
export type ResourceType = 'System' | 'Regulation' | 'Both';

export interface Chapter {
  number: number;
  name: string;
}

export interface Section {
  number: number;
  name: string;
}

export interface SearchResource {
  number: number;
  content: string;
  references: number[];
  keywords: string[];
  summary: string;
  section: Section;
  chapter: Chapter;
  type: string;
}

export interface SearchParams {
  query: string;
  type?: ResourceType;
}

export interface SearchResponse {
  data: SearchResource[];
}
